
bp_vcp_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077e0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007974  08007974  00017974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079d4  080079d4  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  080079d4  080079d4  000179d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079dc  080079dc  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079dc  080079dc  000179dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079e0  080079e0  000179e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080079e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c78  200000fc  08007ae0  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20001d74  08007ae0  00021d74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134fd  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f4f  00000000  00000000  00033629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00036578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  00037610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ee3  00000000  00000000  00038550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142f9  00000000  00000000  00051433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ebba  00000000  00000000  0006572c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f42e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004508  00000000  00000000  000f4338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800795c 	.word	0x0800795c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	0800795c 	.word	0x0800795c

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_TIM_PeriodElapsedCallback>:
 * Exemplo para um período de 0.5 segundos:
 * ARR = (0.5*84E6)/10000 = 4200
 *
 * Obs.: CDC_Transmit_FS() não pode ser chamada dentro da função de tratamento de interrupção do temporizador
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	transmit_en = 1;
 80004f0:	4b04      	ldr	r3, [pc, #16]	; (8000504 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	701a      	strb	r2, [r3, #0]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20000160 	.word	0x20000160

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fa09 	bl	8000924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f82d 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f8e3 	bl	80006e0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800051a:	f006 fcc3 	bl	8006ea4 <MX_USB_DEVICE_Init>
  MX_TIM11_Init();
 800051e:	f000 f893 	bl	8000648 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  //***
  HAL_TIM_Base_Start_IT(&htim11);
 8000522:	4810      	ldr	r0, [pc, #64]	; (8000564 <main+0x5c>)
 8000524:	f002 fc40 	bl	8002da8 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //***
	  if(transmit_en) {
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <main+0x60>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	2b00      	cmp	r3, #0
 8000530:	d0fa      	beq.n	8000528 <main+0x20>
		  uint8_t msg_buffer[] = "Hello\n";
 8000532:	4a0e      	ldr	r2, [pc, #56]	; (800056c <main+0x64>)
 8000534:	463b      	mov	r3, r7
 8000536:	e892 0003 	ldmia.w	r2, {r0, r1}
 800053a:	6018      	str	r0, [r3, #0]
 800053c:	3304      	adds	r3, #4
 800053e:	8019      	strh	r1, [r3, #0]
 8000540:	3302      	adds	r3, #2
 8000542:	0c0a      	lsrs	r2, r1, #16
 8000544:	701a      	strb	r2, [r3, #0]
		  CDC_Transmit_FS(msg_buffer, strlen((const char *)msg_buffer));
 8000546:	463b      	mov	r3, r7
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff fe43 	bl	80001d4 <strlen>
 800054e:	4603      	mov	r3, r0
 8000550:	b29a      	uxth	r2, r3
 8000552:	463b      	mov	r3, r7
 8000554:	4611      	mov	r1, r2
 8000556:	4618      	mov	r0, r3
 8000558:	f006 fd78 	bl	800704c <CDC_Transmit_FS>
		  transmit_en = 0;
 800055c:	4b02      	ldr	r3, [pc, #8]	; (8000568 <main+0x60>)
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
	  if(transmit_en) {
 8000562:	e7e1      	b.n	8000528 <main+0x20>
 8000564:	20000118 	.word	0x20000118
 8000568:	20000160 	.word	0x20000160
 800056c:	08007974 	.word	0x08007974

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2230      	movs	r2, #48	; 0x30
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f007 f9e4 	bl	800794c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	4b29      	ldr	r3, [pc, #164]	; (8000640 <SystemClock_Config+0xd0>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	4a28      	ldr	r2, [pc, #160]	; (8000640 <SystemClock_Config+0xd0>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	; 0x40
 80005a4:	4b26      	ldr	r3, [pc, #152]	; (8000640 <SystemClock_Config+0xd0>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b23      	ldr	r3, [pc, #140]	; (8000644 <SystemClock_Config+0xd4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005bc:	4a21      	ldr	r2, [pc, #132]	; (8000644 <SystemClock_Config+0xd4>)
 80005be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <SystemClock_Config+0xd4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d0:	2301      	movs	r3, #1
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005e4:	2319      	movs	r3, #25
 80005e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ee:	2304      	movs	r3, #4
 80005f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f2:	2307      	movs	r3, #7
 80005f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 ff54 	bl	80024a8 <HAL_RCC_OscConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000606:	f000 f8bd 	bl	8000784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	230f      	movs	r3, #15
 800060c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060e:	2302      	movs	r3, #2
 8000610:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2102      	movs	r1, #2
 8000626:	4618      	mov	r0, r3
 8000628:	f002 f9b6 	bl	8002998 <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000632:	f000 f8a7 	bl	8000784 <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3750      	adds	r7, #80	; 0x50
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
 800065c:	615a      	str	r2, [r3, #20]
 800065e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <MX_TIM11_Init+0x90>)
 8000662:	4a1e      	ldr	r2, [pc, #120]	; (80006dc <MX_TIM11_Init+0x94>)
 8000664:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10000;
 8000666:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <MX_TIM11_Init+0x90>)
 8000668:	f242 7210 	movw	r2, #10000	; 0x2710
 800066c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_TIM11_Init+0x90>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8400;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_TIM11_Init+0x90>)
 8000676:	f242 02d0 	movw	r2, #8400	; 0x20d0
 800067a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800067c:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <MX_TIM11_Init+0x90>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_TIM11_Init+0x90>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000688:	4813      	ldr	r0, [pc, #76]	; (80006d8 <MX_TIM11_Init+0x90>)
 800068a:	f002 fb3d 	bl	8002d08 <HAL_TIM_Base_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 8000694:	f000 f876 	bl	8000784 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8000698:	480f      	ldr	r0, [pc, #60]	; (80006d8 <MX_TIM11_Init+0x90>)
 800069a:	f002 fbe7 	bl	8002e6c <HAL_TIM_OC_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 80006a4:	f000 f86e 	bl	8000784 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2200      	movs	r2, #0
 80006bc:	4619      	mov	r1, r3
 80006be:	4806      	ldr	r0, [pc, #24]	; (80006d8 <MX_TIM11_Init+0x90>)
 80006c0:	f002 fd36 	bl	8003130 <HAL_TIM_OC_ConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 80006ca:	f000 f85b 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	3720      	adds	r7, #32
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000118 	.word	0x20000118
 80006dc:	40014800 	.word	0x40014800

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	4b20      	ldr	r3, [pc, #128]	; (800077c <MX_GPIO_Init+0x9c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a1f      	ldr	r2, [pc, #124]	; (800077c <MX_GPIO_Init+0x9c>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_GPIO_Init+0x9c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_GPIO_Init+0x9c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a18      	ldr	r2, [pc, #96]	; (800077c <MX_GPIO_Init+0x9c>)
 800071c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_GPIO_Init+0x9c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_GPIO_Init+0x9c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a11      	ldr	r2, [pc, #68]	; (800077c <MX_GPIO_Init+0x9c>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_GPIO_Init+0x9c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800074a:	2201      	movs	r2, #1
 800074c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000750:	480b      	ldr	r0, [pc, #44]	; (8000780 <MX_GPIO_Init+0xa0>)
 8000752:	f000 fc13 	bl	8000f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800075c:	2311      	movs	r3, #17
 800075e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000760:	2301      	movs	r3, #1
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	4619      	mov	r1, r3
 800076e:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_GPIO_Init+0xa0>)
 8000770:	f000 fa80 	bl	8000c74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000774:	bf00      	nop
 8000776:	3720      	adds	r7, #32
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40023800 	.word	0x40023800
 8000780:	40020800 	.word	0x40020800

08000784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
}
 800078a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <Error_Handler+0x8>
	...

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <HAL_MspInit+0x4c>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	4a0f      	ldr	r2, [pc, #60]	; (80007dc <HAL_MspInit+0x4c>)
 80007a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a4:	6453      	str	r3, [r2, #68]	; 0x44
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <HAL_MspInit+0x4c>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <HAL_MspInit+0x4c>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	4a08      	ldr	r2, [pc, #32]	; (80007dc <HAL_MspInit+0x4c>)
 80007bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c0:	6413      	str	r3, [r2, #64]	; 0x40
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_MspInit+0x4c>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800

080007e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <HAL_TIM_Base_MspInit+0x48>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d115      	bne.n	800081e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <HAL_TIM_Base_MspInit+0x4c>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fa:	4a0c      	ldr	r2, [pc, #48]	; (800082c <HAL_TIM_Base_MspInit+0x4c>)
 80007fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000800:	6453      	str	r3, [r2, #68]	; 0x44
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <HAL_TIM_Base_MspInit+0x4c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	201a      	movs	r0, #26
 8000814:	f000 f9f7 	bl	8000c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000818:	201a      	movs	r0, #26
 800081a:	f000 fa10 	bl	8000c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40014800 	.word	0x40014800
 800082c:	40023800 	.word	0x40023800

08000830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <NMI_Handler+0x4>

08000836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <HardFault_Handler+0x4>

0800083c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <MemManage_Handler+0x4>

08000842 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <BusFault_Handler+0x4>

08000848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <UsageFault_Handler+0x4>

0800084e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087c:	f000 f8a4 	bl	80009c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800088a:	f002 fb48 	bl	8002f1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000118 	.word	0x20000118

08000898 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <OTG_FS_IRQHandler+0x10>)
 800089e:	f000 fcd6 	bl	800124e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20001648 	.word	0x20001648

080008ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <SystemInit+0x20>)
 80008b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b6:	4a05      	ldr	r2, [pc, #20]	; (80008cc <SystemInit+0x20>)
 80008b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000908 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008d6:	490e      	ldr	r1, [pc, #56]	; (8000910 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008d8:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008dc:	e002      	b.n	80008e4 <LoopCopyDataInit>

080008de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e2:	3304      	adds	r3, #4

080008e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e8:	d3f9      	bcc.n	80008de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008ec:	4c0b      	ldr	r4, [pc, #44]	; (800091c <LoopFillZerobss+0x26>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f0:	e001      	b.n	80008f6 <LoopFillZerobss>

080008f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f4:	3204      	adds	r2, #4

080008f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f8:	d3fb      	bcc.n	80008f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008fa:	f7ff ffd7 	bl	80008ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008fe:	f007 f801 	bl	8007904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000902:	f7ff fe01 	bl	8000508 <main>
  bx  lr    
 8000906:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000908:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800090c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000910:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000914:	080079e4 	.word	0x080079e4
  ldr r2, =_sbss
 8000918:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 800091c:	20001d74 	.word	0x20001d74

08000920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC_IRQHandler>
	...

08000924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_Init+0x40>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <HAL_Init+0x40>)
 800092e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <HAL_Init+0x40>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <HAL_Init+0x40>)
 800093a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800093e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <HAL_Init+0x40>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a07      	ldr	r2, [pc, #28]	; (8000964 <HAL_Init+0x40>)
 8000946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 f94f 	bl	8000bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000952:	200f      	movs	r0, #15
 8000954:	f000 f808 	bl	8000968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000958:	f7ff ff1a 	bl	8000790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023c00 	.word	0x40023c00

08000968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_InitTick+0x54>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_InitTick+0x58>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000982:	fbb2 f3f3 	udiv	r3, r2, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f967 	bl	8000c5a <HAL_SYSTICK_Config>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e00e      	b.n	80009b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b0f      	cmp	r3, #15
 800099a:	d80a      	bhi.n	80009b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099c:	2200      	movs	r2, #0
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009a4:	f000 f92f 	bl	8000c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a8:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <HAL_InitTick+0x5c>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	e000      	b.n	80009b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000004 	.word	0x20000004

080009c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_IncTick+0x20>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_IncTick+0x24>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <HAL_IncTick+0x24>)
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000008 	.word	0x20000008
 80009ec:	20000164 	.word	0x20000164

080009f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <HAL_GetTick+0x14>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000164 	.word	0x20000164

08000a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a10:	f7ff ffee 	bl	80009f0 <HAL_GetTick>
 8000a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a20:	d005      	beq.n	8000a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a22:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <HAL_Delay+0x44>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	461a      	mov	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a2e:	bf00      	nop
 8000a30:	f7ff ffde 	bl	80009f0 <HAL_GetTick>
 8000a34:	4602      	mov	r2, r0
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d8f7      	bhi.n	8000a30 <HAL_Delay+0x28>
  {
  }
}
 8000a40:	bf00      	nop
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000008 	.word	0x20000008

08000a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a82:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	60d3      	str	r3, [r2, #12]
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	0a1b      	lsrs	r3, r3, #8
 8000aa2:	f003 0307 	and.w	r3, r3, #7
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	db0b      	blt.n	8000ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	f003 021f 	and.w	r2, r3, #31
 8000acc:	4907      	ldr	r1, [pc, #28]	; (8000aec <__NVIC_EnableIRQ+0x38>)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	095b      	lsrs	r3, r3, #5
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000e100 	.word	0xe000e100

08000af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db0a      	blt.n	8000b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	490c      	ldr	r1, [pc, #48]	; (8000b3c <__NVIC_SetPriority+0x4c>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	0112      	lsls	r2, r2, #4
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b18:	e00a      	b.n	8000b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4908      	ldr	r1, [pc, #32]	; (8000b40 <__NVIC_SetPriority+0x50>)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	3b04      	subs	r3, #4
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	761a      	strb	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000e100 	.word	0xe000e100
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	f1c3 0307 	rsb	r3, r3, #7
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	bf28      	it	cs
 8000b62:	2304      	movcs	r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d902      	bls.n	8000b74 <NVIC_EncodePriority+0x30>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3b03      	subs	r3, #3
 8000b72:	e000      	b.n	8000b76 <NVIC_EncodePriority+0x32>
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43da      	mvns	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	401a      	ands	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43d9      	mvns	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	4313      	orrs	r3, r2
         );
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3724      	adds	r7, #36	; 0x24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bbc:	d301      	bcc.n	8000bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e00f      	b.n	8000be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <SysTick_Config+0x40>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bca:	210f      	movs	r1, #15
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bd0:	f7ff ff8e 	bl	8000af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <SysTick_Config+0x40>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <SysTick_Config+0x40>)
 8000bdc:	2207      	movs	r2, #7
 8000bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	e000e010 	.word	0xe000e010

08000bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ff29 	bl	8000a50 <__NVIC_SetPriorityGrouping>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c18:	f7ff ff3e 	bl	8000a98 <__NVIC_GetPriorityGrouping>
 8000c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	6978      	ldr	r0, [r7, #20]
 8000c24:	f7ff ff8e 	bl	8000b44 <NVIC_EncodePriority>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff5d 	bl	8000af0 <__NVIC_SetPriority>
}
 8000c36:	bf00      	nop
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff31 	bl	8000ab4 <__NVIC_EnableIRQ>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff ffa2 	bl	8000bac <SysTick_Config>
 8000c68:	4603      	mov	r3, r0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
 8000c8e:	e159      	b.n	8000f44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c90:	2201      	movs	r2, #1
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	f040 8148 	bne.w	8000f3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 0303 	and.w	r3, r3, #3
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d005      	beq.n	8000cc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d130      	bne.n	8000d28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	68da      	ldr	r2, [r3, #12]
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	091b      	lsrs	r3, r3, #4
 8000d12:	f003 0201 	and.w	r2, r3, #1
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	2b03      	cmp	r3, #3
 8000d32:	d017      	beq.n	8000d64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	2203      	movs	r2, #3
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d123      	bne.n	8000db8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	08da      	lsrs	r2, r3, #3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3208      	adds	r2, #8
 8000d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	f003 0307 	and.w	r3, r3, #7
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	220f      	movs	r2, #15
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	691a      	ldr	r2, [r3, #16]
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	08da      	lsrs	r2, r3, #3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3208      	adds	r2, #8
 8000db2:	69b9      	ldr	r1, [r7, #24]
 8000db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0203 	and.w	r2, r3, #3
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f000 80a2 	beq.w	8000f3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b57      	ldr	r3, [pc, #348]	; (8000f5c <HAL_GPIO_Init+0x2e8>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a56      	ldr	r2, [pc, #344]	; (8000f5c <HAL_GPIO_Init+0x2e8>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b54      	ldr	r3, [pc, #336]	; (8000f5c <HAL_GPIO_Init+0x2e8>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e16:	4a52      	ldr	r2, [pc, #328]	; (8000f60 <HAL_GPIO_Init+0x2ec>)
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	089b      	lsrs	r3, r3, #2
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	220f      	movs	r2, #15
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4013      	ands	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a49      	ldr	r2, [pc, #292]	; (8000f64 <HAL_GPIO_Init+0x2f0>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d019      	beq.n	8000e76 <HAL_GPIO_Init+0x202>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a48      	ldr	r2, [pc, #288]	; (8000f68 <HAL_GPIO_Init+0x2f4>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d013      	beq.n	8000e72 <HAL_GPIO_Init+0x1fe>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a47      	ldr	r2, [pc, #284]	; (8000f6c <HAL_GPIO_Init+0x2f8>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d00d      	beq.n	8000e6e <HAL_GPIO_Init+0x1fa>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a46      	ldr	r2, [pc, #280]	; (8000f70 <HAL_GPIO_Init+0x2fc>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d007      	beq.n	8000e6a <HAL_GPIO_Init+0x1f6>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a45      	ldr	r2, [pc, #276]	; (8000f74 <HAL_GPIO_Init+0x300>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d101      	bne.n	8000e66 <HAL_GPIO_Init+0x1f2>
 8000e62:	2304      	movs	r3, #4
 8000e64:	e008      	b.n	8000e78 <HAL_GPIO_Init+0x204>
 8000e66:	2307      	movs	r3, #7
 8000e68:	e006      	b.n	8000e78 <HAL_GPIO_Init+0x204>
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e004      	b.n	8000e78 <HAL_GPIO_Init+0x204>
 8000e6e:	2302      	movs	r3, #2
 8000e70:	e002      	b.n	8000e78 <HAL_GPIO_Init+0x204>
 8000e72:	2301      	movs	r3, #1
 8000e74:	e000      	b.n	8000e78 <HAL_GPIO_Init+0x204>
 8000e76:	2300      	movs	r3, #0
 8000e78:	69fa      	ldr	r2, [r7, #28]
 8000e7a:	f002 0203 	and.w	r2, r2, #3
 8000e7e:	0092      	lsls	r2, r2, #2
 8000e80:	4093      	lsls	r3, r2
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e88:	4935      	ldr	r1, [pc, #212]	; (8000f60 <HAL_GPIO_Init+0x2ec>)
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e96:	4b38      	ldr	r3, [pc, #224]	; (8000f78 <HAL_GPIO_Init+0x304>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eba:	4a2f      	ldr	r2, [pc, #188]	; (8000f78 <HAL_GPIO_Init+0x304>)
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ec0:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <HAL_GPIO_Init+0x304>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ee4:	4a24      	ldr	r2, [pc, #144]	; (8000f78 <HAL_GPIO_Init+0x304>)
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eea:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <HAL_GPIO_Init+0x304>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f0e:	4a1a      	ldr	r2, [pc, #104]	; (8000f78 <HAL_GPIO_Init+0x304>)
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f14:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <HAL_GPIO_Init+0x304>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f38:	4a0f      	ldr	r2, [pc, #60]	; (8000f78 <HAL_GPIO_Init+0x304>)
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3301      	adds	r3, #1
 8000f42:	61fb      	str	r3, [r7, #28]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	2b0f      	cmp	r3, #15
 8000f48:	f67f aea2 	bls.w	8000c90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3724      	adds	r7, #36	; 0x24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40013800 	.word	0x40013800
 8000f64:	40020000 	.word	0x40020000
 8000f68:	40020400 	.word	0x40020400
 8000f6c:	40020800 	.word	0x40020800
 8000f70:	40020c00 	.word	0x40020c00
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40013c00 	.word	0x40013c00

08000f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f8c:	787b      	ldrb	r3, [r7, #1]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f92:	887a      	ldrh	r2, [r7, #2]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f98:	e003      	b.n	8000fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	041a      	lsls	r2, r3, #16
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	619a      	str	r2, [r3, #24]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb0:	b08f      	sub	sp, #60	; 0x3c
 8000fb2:	af0a      	add	r7, sp, #40	; 0x28
 8000fb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d101      	bne.n	8000fc0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e10f      	b.n	80011e0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d106      	bne.n	8000fe0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f006 f97e 	bl	80072dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 fc4f 	bl	80038a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	687e      	ldr	r6, [r7, #4]
 800100c:	466d      	mov	r5, sp
 800100e:	f106 0410 	add.w	r4, r6, #16
 8001012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001014:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001016:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001018:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800101a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800101e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001022:	1d33      	adds	r3, r6, #4
 8001024:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001026:	6838      	ldr	r0, [r7, #0]
 8001028:	f002 fb26 	bl	8003678 <USB_CoreInit>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d005      	beq.n	800103e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2202      	movs	r2, #2
 8001036:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e0d0      	b.n	80011e0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f002 fc3d 	bl	80038c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]
 800104e:	e04a      	b.n	80010e6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	4413      	add	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	440b      	add	r3, r1
 800105e:	333d      	adds	r3, #61	; 0x3d
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	4413      	add	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	440b      	add	r3, r1
 8001072:	333c      	adds	r3, #60	; 0x3c
 8001074:	7bfa      	ldrb	r2, [r7, #15]
 8001076:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	b298      	uxth	r0, r3
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	4613      	mov	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	4413      	add	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	440b      	add	r3, r1
 800108a:	3344      	adds	r3, #68	; 0x44
 800108c:	4602      	mov	r2, r0
 800108e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	4613      	mov	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	4413      	add	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	440b      	add	r3, r1
 800109e:	3340      	adds	r3, #64	; 0x40
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010a4:	7bfa      	ldrb	r2, [r7, #15]
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	4613      	mov	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	4413      	add	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	3348      	adds	r3, #72	; 0x48
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010b8:	7bfa      	ldrb	r2, [r7, #15]
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	4413      	add	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	334c      	adds	r3, #76	; 0x4c
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	4413      	add	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	3354      	adds	r3, #84	; 0x54
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	3301      	adds	r3, #1
 80010e4:	73fb      	strb	r3, [r7, #15]
 80010e6:	7bfa      	ldrb	r2, [r7, #15]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d3af      	bcc.n	8001050 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]
 80010f4:	e044      	b.n	8001180 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	4413      	add	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	440b      	add	r3, r1
 8001104:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	4413      	add	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	440b      	add	r3, r1
 800111a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800111e:	7bfa      	ldrb	r2, [r7, #15]
 8001120:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001138:	7bfa      	ldrb	r2, [r7, #15]
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	4613      	mov	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	4413      	add	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	440b      	add	r3, r1
 8001146:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800114e:	7bfa      	ldrb	r2, [r7, #15]
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	4613      	mov	r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	4413      	add	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	440b      	add	r3, r1
 800115c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001164:	7bfa      	ldrb	r2, [r7, #15]
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	4413      	add	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	440b      	add	r3, r1
 8001172:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	3301      	adds	r3, #1
 800117e:	73fb      	strb	r3, [r7, #15]
 8001180:	7bfa      	ldrb	r2, [r7, #15]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	429a      	cmp	r2, r3
 8001188:	d3b5      	bcc.n	80010f6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	687e      	ldr	r6, [r7, #4]
 8001192:	466d      	mov	r5, sp
 8001194:	f106 0410 	add.w	r4, r6, #16
 8001198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80011a8:	1d33      	adds	r3, r6, #4
 80011aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011ac:	6838      	ldr	r0, [r7, #0]
 80011ae:	f002 fbd5 	bl	800395c <USB_DevInit>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d005      	beq.n	80011c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2202      	movs	r2, #2
 80011bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e00d      	b.n	80011e0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f003 fd24 	bl	8004c26 <USB_DevDisconnect>

  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d101      	bne.n	8001204 <HAL_PCD_Start+0x1c>
 8001200:	2302      	movs	r3, #2
 8001202:	e020      	b.n	8001246 <HAL_PCD_Start+0x5e>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001210:	2b01      	cmp	r3, #1
 8001212:	d109      	bne.n	8001228 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001218:	2b01      	cmp	r3, #1
 800121a:	d005      	beq.n	8001228 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001220:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f002 fb27 	bl	8003880 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f003 fcd4 	bl	8004be4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800124e:	b590      	push	{r4, r7, lr}
 8001250:	b08d      	sub	sp, #52	; 0x34
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800125c:	6a3b      	ldr	r3, [r7, #32]
 800125e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f003 fd92 	bl	8004d8e <USB_GetMode>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	f040 848a 	bne.w	8001b86 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f003 fcf6 	bl	8004c68 <USB_ReadInterrupts>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 8480 	beq.w	8001b84 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f003 fce3 	bl	8004c68 <USB_ReadInterrupts>
 80012a2:	4603      	mov	r3, r0
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d107      	bne.n	80012bc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	695a      	ldr	r2, [r3, #20]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f002 0202 	and.w	r2, r2, #2
 80012ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f003 fcd1 	bl	8004c68 <USB_ReadInterrupts>
 80012c6:	4603      	mov	r3, r0
 80012c8:	f003 0310 	and.w	r3, r3, #16
 80012cc:	2b10      	cmp	r3, #16
 80012ce:	d161      	bne.n	8001394 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	699a      	ldr	r2, [r3, #24]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0210 	bic.w	r2, r2, #16
 80012de:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80012e0:	6a3b      	ldr	r3, [r7, #32]
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	f003 020f 	and.w	r2, r3, #15
 80012ec:	4613      	mov	r3, r2
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	4413      	add	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	4413      	add	r3, r2
 80012fc:	3304      	adds	r3, #4
 80012fe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	0c5b      	lsrs	r3, r3, #17
 8001304:	f003 030f 	and.w	r3, r3, #15
 8001308:	2b02      	cmp	r3, #2
 800130a:	d124      	bne.n	8001356 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001312:	4013      	ands	r3, r2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d035      	beq.n	8001384 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	091b      	lsrs	r3, r3, #4
 8001320:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001322:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001326:	b29b      	uxth	r3, r3
 8001328:	461a      	mov	r2, r3
 800132a:	6a38      	ldr	r0, [r7, #32]
 800132c:	f003 fb08 	bl	8004940 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	691a      	ldr	r2, [r3, #16]
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	091b      	lsrs	r3, r3, #4
 8001338:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800133c:	441a      	add	r2, r3
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	6a1a      	ldr	r2, [r3, #32]
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800134e:	441a      	add	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	621a      	str	r2, [r3, #32]
 8001354:	e016      	b.n	8001384 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	0c5b      	lsrs	r3, r3, #17
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	2b06      	cmp	r3, #6
 8001360:	d110      	bne.n	8001384 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001368:	2208      	movs	r2, #8
 800136a:	4619      	mov	r1, r3
 800136c:	6a38      	ldr	r0, [r7, #32]
 800136e:	f003 fae7 	bl	8004940 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	6a1a      	ldr	r2, [r3, #32]
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	091b      	lsrs	r3, r3, #4
 800137a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800137e:	441a      	add	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	699a      	ldr	r2, [r3, #24]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 0210 	orr.w	r2, r2, #16
 8001392:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f003 fc65 	bl	8004c68 <USB_ReadInterrupts>
 800139e:	4603      	mov	r3, r0
 80013a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013a8:	f040 80a7 	bne.w	80014fa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f003 fc6a 	bl	8004c8e <USB_ReadDevAllOutEpInterrupt>
 80013ba:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013bc:	e099      	b.n	80014f2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 808e 	beq.w	80014e6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f003 fc8e 	bl	8004cf6 <USB_ReadDevOutEPInterrupt>
 80013da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00c      	beq.n	8001400 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	015a      	lsls	r2, r3, #5
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	4413      	add	r3, r2
 80013ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013f2:	461a      	mov	r2, r3
 80013f4:	2301      	movs	r3, #1
 80013f6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 fec2 	bl	8002184 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00c      	beq.n	8001424 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	015a      	lsls	r2, r3, #5
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	4413      	add	r3, r2
 8001412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001416:	461a      	mov	r2, r3
 8001418:	2308      	movs	r3, #8
 800141a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800141c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 ff98 	bl	8002354 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	2b00      	cmp	r3, #0
 800142c:	d008      	beq.n	8001440 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	015a      	lsls	r2, r3, #5
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	4413      	add	r3, r2
 8001436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800143a:	461a      	mov	r2, r3
 800143c:	2310      	movs	r3, #16
 800143e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d030      	beq.n	80014ac <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800144a:	6a3b      	ldr	r3, [r7, #32]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001452:	2b80      	cmp	r3, #128	; 0x80
 8001454:	d109      	bne.n	800146a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	69fa      	ldr	r2, [r7, #28]
 8001460:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001464:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001468:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800146a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800146c:	4613      	mov	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	3304      	adds	r3, #4
 800147e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	78db      	ldrb	r3, [r3, #3]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d108      	bne.n	800149a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	2200      	movs	r2, #0
 800148c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	b2db      	uxtb	r3, r3
 8001492:	4619      	mov	r1, r3
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f006 f827 	bl	80074e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	015a      	lsls	r2, r3, #5
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	4413      	add	r3, r2
 80014a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014a6:	461a      	mov	r2, r3
 80014a8:	2302      	movs	r3, #2
 80014aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	f003 0320 	and.w	r3, r3, #32
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d008      	beq.n	80014c8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	015a      	lsls	r2, r3, #5
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	4413      	add	r3, r2
 80014be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014c2:	461a      	mov	r2, r3
 80014c4:	2320      	movs	r3, #32
 80014c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d009      	beq.n	80014e6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	015a      	lsls	r2, r3, #5
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	4413      	add	r3, r2
 80014da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014de:	461a      	mov	r2, r3
 80014e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	3301      	adds	r3, #1
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ee:	085b      	lsrs	r3, r3, #1
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f47f af62 	bne.w	80013be <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f003 fbb2 	bl	8004c68 <USB_ReadInterrupts>
 8001504:	4603      	mov	r3, r0
 8001506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800150a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800150e:	f040 80db 	bne.w	80016c8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f003 fbd3 	bl	8004cc2 <USB_ReadDevAllInEpInterrupt>
 800151c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001522:	e0cd      	b.n	80016c0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 80c2 	beq.w	80016b4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	4611      	mov	r1, r2
 800153a:	4618      	mov	r0, r3
 800153c:	f003 fbf9 	bl	8004d32 <USB_ReadDevInEPInterrupt>
 8001540:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	d057      	beq.n	80015fc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	2201      	movs	r2, #1
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	43db      	mvns	r3, r3
 8001566:	69f9      	ldr	r1, [r7, #28]
 8001568:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800156c:	4013      	ands	r3, r2
 800156e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	015a      	lsls	r2, r3, #5
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	4413      	add	r3, r2
 8001578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800157c:	461a      	mov	r2, r3
 800157e:	2301      	movs	r3, #1
 8001580:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d132      	bne.n	80015f0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800158e:	4613      	mov	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	440b      	add	r3, r1
 8001598:	334c      	adds	r3, #76	; 0x4c
 800159a:	6819      	ldr	r1, [r3, #0]
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a0:	4613      	mov	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	4413      	add	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4403      	add	r3, r0
 80015aa:	3348      	adds	r3, #72	; 0x48
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4419      	add	r1, r3
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b4:	4613      	mov	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4403      	add	r3, r0
 80015be:	334c      	adds	r3, #76	; 0x4c
 80015c0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d113      	bne.n	80015f0 <HAL_PCD_IRQHandler+0x3a2>
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015cc:	4613      	mov	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4413      	add	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	3354      	adds	r3, #84	; 0x54
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d108      	bne.n	80015f0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6818      	ldr	r0, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80015e8:	461a      	mov	r2, r3
 80015ea:	2101      	movs	r1, #1
 80015ec:	f003 fc00 	bl	8004df0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	4619      	mov	r1, r3
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f005 fef1 	bl	80073de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	d008      	beq.n	8001618 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	015a      	lsls	r2, r3, #5
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	4413      	add	r3, r2
 800160e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001612:	461a      	mov	r2, r3
 8001614:	2308      	movs	r3, #8
 8001616:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	f003 0310 	and.w	r3, r3, #16
 800161e:	2b00      	cmp	r3, #0
 8001620:	d008      	beq.n	8001634 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	015a      	lsls	r2, r3, #5
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	4413      	add	r3, r2
 800162a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800162e:	461a      	mov	r2, r3
 8001630:	2310      	movs	r3, #16
 8001632:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800163a:	2b00      	cmp	r3, #0
 800163c:	d008      	beq.n	8001650 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	015a      	lsls	r2, r3, #5
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	4413      	add	r3, r2
 8001646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800164a:	461a      	mov	r2, r3
 800164c:	2340      	movs	r3, #64	; 0x40
 800164e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d023      	beq.n	80016a2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800165a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800165c:	6a38      	ldr	r0, [r7, #32]
 800165e:	f002 fae1 	bl	8003c24 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001664:	4613      	mov	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	4413      	add	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	3338      	adds	r3, #56	; 0x38
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	3304      	adds	r3, #4
 8001674:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	78db      	ldrb	r3, [r3, #3]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d108      	bne.n	8001690 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	2200      	movs	r2, #0
 8001682:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	b2db      	uxtb	r3, r3
 8001688:	4619      	mov	r1, r3
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f005 ff3e 	bl	800750c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	015a      	lsls	r2, r3, #5
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	4413      	add	r3, r2
 8001698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800169c:	461a      	mov	r2, r3
 800169e:	2302      	movs	r3, #2
 80016a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 fcdb 	bl	800206a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	3301      	adds	r3, #1
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016bc:	085b      	lsrs	r3, r3, #1
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f47f af2e 	bne.w	8001524 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 facb 	bl	8004c68 <USB_ReadInterrupts>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016dc:	d122      	bne.n	8001724 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	69fa      	ldr	r2, [r7, #28]
 80016e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016ec:	f023 0301 	bic.w	r3, r3, #1
 80016f0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d108      	bne.n	800170e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001704:	2100      	movs	r1, #0
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 fec2 	bl	8002490 <HAL_PCDEx_LPM_Callback>
 800170c:	e002      	b.n	8001714 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f005 fedc 	bl	80074cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	695a      	ldr	r2, [r3, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001722:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f003 fa9d 	bl	8004c68 <USB_ReadInterrupts>
 800172e:	4603      	mov	r3, r0
 8001730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001738:	d112      	bne.n	8001760 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b01      	cmp	r3, #1
 8001748:	d102      	bne.n	8001750 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f005 fe98 	bl	8007480 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	695a      	ldr	r2, [r3, #20]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800175e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f003 fa7f 	bl	8004c68 <USB_ReadInterrupts>
 800176a:	4603      	mov	r3, r0
 800176c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001774:	f040 80b7 	bne.w	80018e6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	69fa      	ldr	r2, [r7, #28]
 8001782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001786:	f023 0301 	bic.w	r3, r3, #1
 800178a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2110      	movs	r1, #16
 8001792:	4618      	mov	r0, r3
 8001794:	f002 fa46 	bl	8003c24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001798:	2300      	movs	r3, #0
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800179c:	e046      	b.n	800182c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800179e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a0:	015a      	lsls	r2, r3, #5
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	4413      	add	r3, r2
 80017a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017aa:	461a      	mov	r2, r3
 80017ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017b0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b4:	015a      	lsls	r2, r3, #5
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	4413      	add	r3, r2
 80017ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017c2:	0151      	lsls	r1, r2, #5
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	440a      	add	r2, r1
 80017c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d4:	015a      	lsls	r2, r3, #5
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	4413      	add	r3, r2
 80017da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017de:	461a      	mov	r2, r3
 80017e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017e4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e8:	015a      	lsls	r2, r3, #5
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	4413      	add	r3, r2
 80017ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f6:	0151      	lsls	r1, r2, #5
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	440a      	add	r2, r1
 80017fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001800:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001804:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001808:	015a      	lsls	r2, r3, #5
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	4413      	add	r3, r2
 800180e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001816:	0151      	lsls	r1, r2, #5
 8001818:	69fa      	ldr	r2, [r7, #28]
 800181a:	440a      	add	r2, r1
 800181c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001820:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001824:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001828:	3301      	adds	r3, #1
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001832:	429a      	cmp	r2, r3
 8001834:	d3b3      	bcc.n	800179e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001844:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001848:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	2b00      	cmp	r3, #0
 8001850:	d016      	beq.n	8001880 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001862:	f043 030b 	orr.w	r3, r3, #11
 8001866:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001878:	f043 030b 	orr.w	r3, r3, #11
 800187c:	6453      	str	r3, [r2, #68]	; 0x44
 800187e:	e015      	b.n	80018ac <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	69fa      	ldr	r2, [r7, #28]
 800188a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800188e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001892:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001896:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	69fa      	ldr	r2, [r7, #28]
 80018a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018a6:	f043 030b 	orr.w	r3, r3, #11
 80018aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	69fa      	ldr	r2, [r7, #28]
 80018b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018d0:	461a      	mov	r2, r3
 80018d2:	f003 fa8d 	bl	8004df0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	695a      	ldr	r2, [r3, #20]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80018e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f003 f9bc 	bl	8004c68 <USB_ReadInterrupts>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018fa:	d124      	bne.n	8001946 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f003 fa52 	bl	8004daa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f002 fa07 	bl	8003d1e <USB_GetDevSpeed>
 8001910:	4603      	mov	r3, r0
 8001912:	461a      	mov	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681c      	ldr	r4, [r3, #0]
 800191c:	f001 f9e8 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 8001920:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001926:	b2db      	uxtb	r3, r3
 8001928:	461a      	mov	r2, r3
 800192a:	4620      	mov	r0, r4
 800192c:	f001 ff06 	bl	800373c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f005 fd7c 	bl	800742e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	695a      	ldr	r2, [r3, #20]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001944:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f003 f98c 	bl	8004c68 <USB_ReadInterrupts>
 8001950:	4603      	mov	r3, r0
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b08      	cmp	r3, #8
 8001958:	d10a      	bne.n	8001970 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f005 fd59 	bl	8007412 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	695a      	ldr	r2, [r3, #20]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f002 0208 	and.w	r2, r2, #8
 800196e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f003 f977 	bl	8004c68 <USB_ReadInterrupts>
 800197a:	4603      	mov	r3, r0
 800197c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001980:	2b80      	cmp	r3, #128	; 0x80
 8001982:	d122      	bne.n	80019ca <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800198c:	6a3b      	ldr	r3, [r7, #32]
 800198e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001990:	2301      	movs	r3, #1
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
 8001994:	e014      	b.n	80019c0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199a:	4613      	mov	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	4413      	add	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	440b      	add	r3, r1
 80019a4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d105      	bne.n	80019ba <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	4619      	mov	r1, r3
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 fb27 	bl	8002008 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	3301      	adds	r3, #1
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d3e5      	bcc.n	8001996 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f003 f94a 	bl	8004c68 <USB_ReadInterrupts>
 80019d4:	4603      	mov	r3, r0
 80019d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019de:	d13b      	bne.n	8001a58 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019e0:	2301      	movs	r3, #1
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
 80019e4:	e02b      	b.n	8001a3e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	015a      	lsls	r2, r3, #5
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	4413      	add	r3, r2
 80019ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019fa:	4613      	mov	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	4413      	add	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	440b      	add	r3, r1
 8001a04:	3340      	adds	r3, #64	; 0x40
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d115      	bne.n	8001a38 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a0c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	da12      	bge.n	8001a38 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a16:	4613      	mov	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	440b      	add	r3, r1
 8001a20:	333f      	adds	r3, #63	; 0x3f
 8001a22:	2201      	movs	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	4619      	mov	r1, r3
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 fae8 	bl	8002008 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d3ce      	bcc.n	80019e6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	695a      	ldr	r2, [r3, #20]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f003 f903 	bl	8004c68 <USB_ReadInterrupts>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a6c:	d155      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a6e:	2301      	movs	r3, #1
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
 8001a72:	e045      	b.n	8001b00 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	015a      	lsls	r2, r3, #5
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a88:	4613      	mov	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d12e      	bne.n	8001afa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a9c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	da2b      	bge.n	8001afa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001aae:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d121      	bne.n	8001afa <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aba:	4613      	mov	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001acc:	6a3b      	ldr	r3, [r7, #32]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10a      	bne.n	8001afa <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	69fa      	ldr	r2, [r7, #28]
 8001aee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af6:	6053      	str	r3, [r2, #4]
            break;
 8001af8:	e007      	b.n	8001b0a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	3301      	adds	r3, #1
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d3b4      	bcc.n	8001a74 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	695a      	ldr	r2, [r3, #20]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 f8a2 	bl	8004c68 <USB_ReadInterrupts>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b2e:	d10a      	bne.n	8001b46 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f005 fcfd 	bl	8007530 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	695a      	ldr	r2, [r3, #20]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f003 f88c 	bl	8004c68 <USB_ReadInterrupts>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d115      	bne.n	8001b86 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d002      	beq.n	8001b72 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f005 fced 	bl	800754c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6859      	ldr	r1, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	e000      	b.n	8001b86 <HAL_PCD_IRQHandler+0x938>
      return;
 8001b84:	bf00      	nop
    }
  }
}
 8001b86:	3734      	adds	r7, #52	; 0x34
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd90      	pop	{r4, r7, pc}

08001b8c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <HAL_PCD_SetAddress+0x1a>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e013      	b.n	8001bce <HAL_PCD_SetAddress+0x42>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	78fa      	ldrb	r2, [r7, #3]
 8001bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	78fa      	ldrb	r2, [r7, #3]
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f002 ffea 	bl	8004b98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	4608      	mov	r0, r1
 8001be0:	4611      	mov	r1, r2
 8001be2:	461a      	mov	r2, r3
 8001be4:	4603      	mov	r3, r0
 8001be6:	70fb      	strb	r3, [r7, #3]
 8001be8:	460b      	mov	r3, r1
 8001bea:	803b      	strh	r3, [r7, #0]
 8001bec:	4613      	mov	r3, r2
 8001bee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	da0f      	bge.n	8001c1c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	f003 020f 	and.w	r2, r3, #15
 8001c02:	4613      	mov	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4413      	add	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	3338      	adds	r3, #56	; 0x38
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	4413      	add	r3, r2
 8001c10:	3304      	adds	r3, #4
 8001c12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2201      	movs	r2, #1
 8001c18:	705a      	strb	r2, [r3, #1]
 8001c1a:	e00f      	b.n	8001c3c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	f003 020f 	and.w	r2, r3, #15
 8001c22:	4613      	mov	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4413      	add	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	3304      	adds	r3, #4
 8001c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c48:	883a      	ldrh	r2, [r7, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	78ba      	ldrb	r2, [r7, #2]
 8001c52:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	785b      	ldrb	r3, [r3, #1]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d004      	beq.n	8001c66 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c66:	78bb      	ldrb	r3, [r7, #2]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d102      	bne.n	8001c72 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_PCD_EP_Open+0xaa>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e00e      	b.n	8001c9e <HAL_PCD_EP_Open+0xc8>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68f9      	ldr	r1, [r7, #12]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f002 f86a 	bl	8003d68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001c9c:	7afb      	ldrb	r3, [r7, #11]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b084      	sub	sp, #16
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	da0f      	bge.n	8001cda <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cba:	78fb      	ldrb	r3, [r7, #3]
 8001cbc:	f003 020f 	and.w	r2, r3, #15
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	3338      	adds	r3, #56	; 0x38
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	3304      	adds	r3, #4
 8001cd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	705a      	strb	r2, [r3, #1]
 8001cd8:	e00f      	b.n	8001cfa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cda:	78fb      	ldrb	r3, [r7, #3]
 8001cdc:	f003 020f 	and.w	r2, r3, #15
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	4413      	add	r3, r2
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001cfa:	78fb      	ldrb	r3, [r7, #3]
 8001cfc:	f003 030f 	and.w	r3, r3, #15
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d101      	bne.n	8001d14 <HAL_PCD_EP_Close+0x6e>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e00e      	b.n	8001d32 <HAL_PCD_EP_Close+0x8c>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68f9      	ldr	r1, [r7, #12]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f002 f8a8 	bl	8003e78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	460b      	mov	r3, r1
 8001d48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d4a:	7afb      	ldrb	r3, [r7, #11]
 8001d4c:	f003 020f 	and.w	r2, r3, #15
 8001d50:	4613      	mov	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4413      	add	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	3304      	adds	r3, #4
 8001d62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	2200      	movs	r2, #0
 8001d74:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d7c:	7afb      	ldrb	r3, [r7, #11]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d102      	bne.n	8001d96 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d96:	7afb      	ldrb	r3, [r7, #11]
 8001d98:	f003 030f 	and.w	r3, r3, #15
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d109      	bne.n	8001db4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	6979      	ldr	r1, [r7, #20]
 8001dae:	f002 fb87 	bl	80044c0 <USB_EP0StartXfer>
 8001db2:	e008      	b.n	8001dc6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	6979      	ldr	r1, [r7, #20]
 8001dc2:	f002 f935 	bl	8004030 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	f003 020f 	and.w	r2, r3, #15
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e10:	7afb      	ldrb	r3, [r7, #11]
 8001e12:	f003 020f 	and.w	r2, r3, #15
 8001e16:	4613      	mov	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	3338      	adds	r3, #56	; 0x38
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4413      	add	r3, r2
 8001e24:	3304      	adds	r3, #4
 8001e26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2200      	movs	r2, #0
 8001e38:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e40:	7afb      	ldrb	r3, [r7, #11]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d102      	bne.n	8001e5a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e5a:	7afb      	ldrb	r3, [r7, #11]
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	6979      	ldr	r1, [r7, #20]
 8001e72:	f002 fb25 	bl	80044c0 <USB_EP0StartXfer>
 8001e76:	e008      	b.n	8001e8a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	6979      	ldr	r1, [r7, #20]
 8001e86:	f002 f8d3 	bl	8004030 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	f003 020f 	and.w	r2, r3, #15
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d901      	bls.n	8001eb2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e050      	b.n	8001f54 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	da0f      	bge.n	8001eda <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eba:	78fb      	ldrb	r3, [r7, #3]
 8001ebc:	f003 020f 	and.w	r2, r3, #15
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	3338      	adds	r3, #56	; 0x38
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	3304      	adds	r3, #4
 8001ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	705a      	strb	r2, [r3, #1]
 8001ed8:	e00d      	b.n	8001ef6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001eda:	78fa      	ldrb	r2, [r7, #3]
 8001edc:	4613      	mov	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	3304      	adds	r3, #4
 8001eee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_PCD_EP_SetStall+0x82>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e01e      	b.n	8001f54 <HAL_PCD_EP_SetStall+0xc0>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68f9      	ldr	r1, [r7, #12]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f002 fd63 	bl	80049f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10a      	bne.n	8001f4a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	b2d9      	uxtb	r1, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f44:	461a      	mov	r2, r3
 8001f46:	f002 ff53 	bl	8004df0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	f003 020f 	and.w	r2, r3, #15
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d901      	bls.n	8001f7a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e042      	b.n	8002000 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	da0f      	bge.n	8001fa2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	f003 020f 	and.w	r2, r3, #15
 8001f88:	4613      	mov	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	3338      	adds	r3, #56	; 0x38
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	4413      	add	r3, r2
 8001f96:	3304      	adds	r3, #4
 8001f98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	705a      	strb	r2, [r3, #1]
 8001fa0:	e00f      	b.n	8001fc2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	f003 020f 	and.w	r2, r3, #15
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3304      	adds	r3, #4
 8001fba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_PCD_EP_ClrStall+0x86>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e00e      	b.n	8002000 <HAL_PCD_EP_ClrStall+0xa4>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68f9      	ldr	r1, [r7, #12]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f002 fd6b 	bl	8004acc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002014:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002018:	2b00      	cmp	r3, #0
 800201a:	da0c      	bge.n	8002036 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	f003 020f 	and.w	r2, r3, #15
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	3338      	adds	r3, #56	; 0x38
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	4413      	add	r3, r2
 8002030:	3304      	adds	r3, #4
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	e00c      	b.n	8002050 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002036:	78fb      	ldrb	r3, [r7, #3]
 8002038:	f003 020f 	and.w	r2, r3, #15
 800203c:	4613      	mov	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4413      	add	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	4413      	add	r3, r2
 800204c:	3304      	adds	r3, #4
 800204e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68f9      	ldr	r1, [r7, #12]
 8002056:	4618      	mov	r0, r3
 8002058:	f002 fb8a 	bl	8004770 <USB_EPStopXfer>
 800205c:	4603      	mov	r3, r0
 800205e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002060:	7afb      	ldrb	r3, [r7, #11]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b08a      	sub	sp, #40	; 0x28
 800206e:	af02      	add	r7, sp, #8
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	3338      	adds	r3, #56	; 0x38
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	3304      	adds	r3, #4
 8002090:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6a1a      	ldr	r2, [r3, #32]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	429a      	cmp	r2, r3
 800209c:	d901      	bls.n	80020a2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e06c      	b.n	800217c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	699a      	ldr	r2, [r3, #24]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d902      	bls.n	80020be <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3303      	adds	r3, #3
 80020c2:	089b      	lsrs	r3, r3, #2
 80020c4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020c6:	e02b      	b.n	8002120 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	699a      	ldr	r2, [r3, #24]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d902      	bls.n	80020e4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	3303      	adds	r3, #3
 80020e8:	089b      	lsrs	r3, r3, #2
 80020ea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6919      	ldr	r1, [r3, #16]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	4603      	mov	r3, r0
 8002102:	6978      	ldr	r0, [r7, #20]
 8002104:	f002 fbde 	bl	80048c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	441a      	add	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6a1a      	ldr	r2, [r3, #32]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	441a      	add	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4413      	add	r3, r2
 8002128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	b29b      	uxth	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	429a      	cmp	r2, r3
 8002134:	d809      	bhi.n	800214a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a1a      	ldr	r2, [r3, #32]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800213e:	429a      	cmp	r2, r3
 8002140:	d203      	bcs.n	800214a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1be      	bne.n	80020c8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	429a      	cmp	r2, r3
 8002154:	d811      	bhi.n	800217a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	2201      	movs	r2, #1
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800216a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	43db      	mvns	r3, r3
 8002170:	6939      	ldr	r1, [r7, #16]
 8002172:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002176:	4013      	ands	r3, r2
 8002178:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	333c      	adds	r3, #60	; 0x3c
 800219c:	3304      	adds	r3, #4
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d17b      	bne.n	80022b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d015      	beq.n	80021f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	4a61      	ldr	r2, [pc, #388]	; (800234c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	f240 80b9 	bls.w	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80b3 	beq.w	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e6:	461a      	mov	r2, r3
 80021e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ec:	6093      	str	r3, [r2, #8]
 80021ee:	e0a7      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	4413      	add	r3, r2
 8002202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002206:	461a      	mov	r2, r3
 8002208:	2320      	movs	r3, #32
 800220a:	6093      	str	r3, [r2, #8]
 800220c:	e098      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002214:	2b00      	cmp	r3, #0
 8002216:	f040 8093 	bne.w	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	4a4b      	ldr	r2, [pc, #300]	; (800234c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d90f      	bls.n	8002242 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	4413      	add	r3, r2
 8002234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002238:	461a      	mov	r2, r3
 800223a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800223e:	6093      	str	r3, [r2, #8]
 8002240:	e07e      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	4413      	add	r3, r2
 8002254:	3304      	adds	r3, #4
 8002256:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	69da      	ldr	r2, [r3, #28]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	0159      	lsls	r1, r3, #5
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	440b      	add	r3, r1
 8002264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226e:	1ad2      	subs	r2, r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d114      	bne.n	80022a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800228c:	461a      	mov	r2, r3
 800228e:	2101      	movs	r1, #1
 8002290:	f002 fdae 	bl	8004df0 <USB_EP0_OutStart>
 8002294:	e006      	b.n	80022a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	691a      	ldr	r2, [r3, #16]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	441a      	add	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	4619      	mov	r1, r3
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f005 f87c 	bl	80073a8 <HAL_PCD_DataOutStageCallback>
 80022b0:	e046      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	4a26      	ldr	r2, [pc, #152]	; (8002350 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d124      	bne.n	8002304 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00a      	beq.n	80022da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d0:	461a      	mov	r2, r3
 80022d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022d6:	6093      	str	r3, [r2, #8]
 80022d8:	e032      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f0:	461a      	mov	r2, r3
 80022f2:	2320      	movs	r3, #32
 80022f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	4619      	mov	r1, r3
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f005 f853 	bl	80073a8 <HAL_PCD_DataOutStageCallback>
 8002302:	e01d      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d114      	bne.n	8002334 <PCD_EP_OutXfrComplete_int+0x1b0>
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d108      	bne.n	8002334 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800232c:	461a      	mov	r2, r3
 800232e:	2100      	movs	r1, #0
 8002330:	f002 fd5e 	bl	8004df0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	b2db      	uxtb	r3, r3
 8002338:	4619      	mov	r1, r3
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f005 f834 	bl	80073a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3720      	adds	r7, #32
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	4f54300a 	.word	0x4f54300a
 8002350:	4f54310a 	.word	0x4f54310a

08002354 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	333c      	adds	r3, #60	; 0x3c
 800236c:	3304      	adds	r3, #4
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4413      	add	r3, r2
 800237a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4a15      	ldr	r2, [pc, #84]	; (80023dc <PCD_EP_OutSetupPacket_int+0x88>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d90e      	bls.n	80023a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002390:	2b00      	cmp	r3, #0
 8002392:	d009      	beq.n	80023a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4413      	add	r3, r2
 800239c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a0:	461a      	mov	r2, r3
 80023a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f004 ffeb 	bl	8007384 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <PCD_EP_OutSetupPacket_int+0x88>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d90c      	bls.n	80023d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d108      	bne.n	80023d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023c8:	461a      	mov	r2, r3
 80023ca:	2101      	movs	r1, #1
 80023cc:	f002 fd10 	bl	8004df0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	4f54300a 	.word	0x4f54300a

080023e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	70fb      	strb	r3, [r7, #3]
 80023ec:	4613      	mov	r3, r2
 80023ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d107      	bne.n	800240e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023fe:	883b      	ldrh	r3, [r7, #0]
 8002400:	0419      	lsls	r1, r3, #16
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	430a      	orrs	r2, r1
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
 800240c:	e028      	b.n	8002460 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	4413      	add	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800241c:	2300      	movs	r3, #0
 800241e:	73fb      	strb	r3, [r7, #15]
 8002420:	e00d      	b.n	800243e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	3340      	adds	r3, #64	; 0x40
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	4413      	add	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	3301      	adds	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	7bfa      	ldrb	r2, [r7, #15]
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	3b01      	subs	r3, #1
 8002444:	429a      	cmp	r2, r3
 8002446:	d3ec      	bcc.n	8002422 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002448:	883b      	ldrh	r3, [r7, #0]
 800244a:	0418      	lsls	r0, r3, #16
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6819      	ldr	r1, [r3, #0]
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	3b01      	subs	r3, #1
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	4302      	orrs	r2, r0
 8002458:	3340      	adds	r3, #64	; 0x40
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	887a      	ldrh	r2, [r7, #2]
 8002480:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e267      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d075      	beq.n	80025b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024c6:	4b88      	ldr	r3, [pc, #544]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d00c      	beq.n	80024ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d2:	4b85      	ldr	r3, [pc, #532]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d112      	bne.n	8002504 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024de:	4b82      	ldr	r3, [pc, #520]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ea:	d10b      	bne.n	8002504 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ec:	4b7e      	ldr	r3, [pc, #504]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d05b      	beq.n	80025b0 <HAL_RCC_OscConfig+0x108>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d157      	bne.n	80025b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e242      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250c:	d106      	bne.n	800251c <HAL_RCC_OscConfig+0x74>
 800250e:	4b76      	ldr	r3, [pc, #472]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a75      	ldr	r2, [pc, #468]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e01d      	b.n	8002558 <HAL_RCC_OscConfig+0xb0>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0x98>
 8002526:	4b70      	ldr	r3, [pc, #448]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a6f      	ldr	r2, [pc, #444]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 800252c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b6d      	ldr	r3, [pc, #436]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a6c      	ldr	r2, [pc, #432]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e00b      	b.n	8002558 <HAL_RCC_OscConfig+0xb0>
 8002540:	4b69      	ldr	r3, [pc, #420]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a68      	ldr	r2, [pc, #416]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b66      	ldr	r3, [pc, #408]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a65      	ldr	r2, [pc, #404]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d013      	beq.n	8002588 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7fe fa46 	bl	80009f0 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002568:	f7fe fa42 	bl	80009f0 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	; 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e207      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	4b5b      	ldr	r3, [pc, #364]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0xc0>
 8002586:	e014      	b.n	80025b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7fe fa32 	bl	80009f0 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002590:	f7fe fa2e 	bl	80009f0 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e1f3      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	4b51      	ldr	r3, [pc, #324]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0xe8>
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d063      	beq.n	8002686 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025be:	4b4a      	ldr	r3, [pc, #296]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00b      	beq.n	80025e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ca:	4b47      	ldr	r3, [pc, #284]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d11c      	bne.n	8002610 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d6:	4b44      	ldr	r3, [pc, #272]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d116      	bne.n	8002610 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e2:	4b41      	ldr	r3, [pc, #260]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <HAL_RCC_OscConfig+0x152>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e1c7      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fa:	4b3b      	ldr	r3, [pc, #236]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4937      	ldr	r1, [pc, #220]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260e:	e03a      	b.n	8002686 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d020      	beq.n	800265a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002618:	4b34      	ldr	r3, [pc, #208]	; (80026ec <HAL_RCC_OscConfig+0x244>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7fe f9e7 	bl	80009f0 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002626:	f7fe f9e3 	bl	80009f0 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e1a8      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002638:	4b2b      	ldr	r3, [pc, #172]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002644:	4b28      	ldr	r3, [pc, #160]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4925      	ldr	r1, [pc, #148]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002654:	4313      	orrs	r3, r2
 8002656:	600b      	str	r3, [r1, #0]
 8002658:	e015      	b.n	8002686 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265a:	4b24      	ldr	r3, [pc, #144]	; (80026ec <HAL_RCC_OscConfig+0x244>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7fe f9c6 	bl	80009f0 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002668:	f7fe f9c2 	bl	80009f0 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e187      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267a:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d036      	beq.n	8002700 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d016      	beq.n	80026c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269a:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <HAL_RCC_OscConfig+0x248>)
 800269c:	2201      	movs	r2, #1
 800269e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a0:	f7fe f9a6 	bl	80009f0 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a8:	f7fe f9a2 	bl	80009f0 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e167      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80026bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x200>
 80026c6:	e01b      	b.n	8002700 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c8:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <HAL_RCC_OscConfig+0x248>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ce:	f7fe f98f 	bl	80009f0 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d4:	e00e      	b.n	80026f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d6:	f7fe f98b 	bl	80009f0 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d907      	bls.n	80026f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e150      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
 80026e8:	40023800 	.word	0x40023800
 80026ec:	42470000 	.word	0x42470000
 80026f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f4:	4b88      	ldr	r3, [pc, #544]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80026f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1ea      	bne.n	80026d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 8097 	beq.w	800283c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270e:	2300      	movs	r3, #0
 8002710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002712:	4b81      	ldr	r3, [pc, #516]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10f      	bne.n	800273e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	4b7d      	ldr	r3, [pc, #500]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a7c      	ldr	r2, [pc, #496]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272c:	6413      	str	r3, [r2, #64]	; 0x40
 800272e:	4b7a      	ldr	r3, [pc, #488]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273a:	2301      	movs	r3, #1
 800273c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273e:	4b77      	ldr	r3, [pc, #476]	; (800291c <HAL_RCC_OscConfig+0x474>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d118      	bne.n	800277c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274a:	4b74      	ldr	r3, [pc, #464]	; (800291c <HAL_RCC_OscConfig+0x474>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a73      	ldr	r2, [pc, #460]	; (800291c <HAL_RCC_OscConfig+0x474>)
 8002750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002756:	f7fe f94b 	bl	80009f0 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275e:	f7fe f947 	bl	80009f0 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e10c      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002770:	4b6a      	ldr	r3, [pc, #424]	; (800291c <HAL_RCC_OscConfig+0x474>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d106      	bne.n	8002792 <HAL_RCC_OscConfig+0x2ea>
 8002784:	4b64      	ldr	r3, [pc, #400]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	4a63      	ldr	r2, [pc, #396]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6713      	str	r3, [r2, #112]	; 0x70
 8002790:	e01c      	b.n	80027cc <HAL_RCC_OscConfig+0x324>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b05      	cmp	r3, #5
 8002798:	d10c      	bne.n	80027b4 <HAL_RCC_OscConfig+0x30c>
 800279a:	4b5f      	ldr	r3, [pc, #380]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279e:	4a5e      	ldr	r2, [pc, #376]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80027a0:	f043 0304 	orr.w	r3, r3, #4
 80027a4:	6713      	str	r3, [r2, #112]	; 0x70
 80027a6:	4b5c      	ldr	r3, [pc, #368]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027aa:	4a5b      	ldr	r2, [pc, #364]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6713      	str	r3, [r2, #112]	; 0x70
 80027b2:	e00b      	b.n	80027cc <HAL_RCC_OscConfig+0x324>
 80027b4:	4b58      	ldr	r3, [pc, #352]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b8:	4a57      	ldr	r2, [pc, #348]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80027ba:	f023 0301 	bic.w	r3, r3, #1
 80027be:	6713      	str	r3, [r2, #112]	; 0x70
 80027c0:	4b55      	ldr	r3, [pc, #340]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80027c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c4:	4a54      	ldr	r2, [pc, #336]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80027c6:	f023 0304 	bic.w	r3, r3, #4
 80027ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d015      	beq.n	8002800 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d4:	f7fe f90c 	bl	80009f0 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027da:	e00a      	b.n	80027f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027dc:	f7fe f908 	bl	80009f0 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e0cb      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f2:	4b49      	ldr	r3, [pc, #292]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0ee      	beq.n	80027dc <HAL_RCC_OscConfig+0x334>
 80027fe:	e014      	b.n	800282a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002800:	f7fe f8f6 	bl	80009f0 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002806:	e00a      	b.n	800281e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7fe f8f2 	bl	80009f0 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e0b5      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281e:	4b3e      	ldr	r3, [pc, #248]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1ee      	bne.n	8002808 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800282a:	7dfb      	ldrb	r3, [r7, #23]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d105      	bne.n	800283c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002830:	4b39      	ldr	r3, [pc, #228]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	4a38      	ldr	r2, [pc, #224]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800283a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80a1 	beq.w	8002988 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002846:	4b34      	ldr	r3, [pc, #208]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b08      	cmp	r3, #8
 8002850:	d05c      	beq.n	800290c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d141      	bne.n	80028de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285a:	4b31      	ldr	r3, [pc, #196]	; (8002920 <HAL_RCC_OscConfig+0x478>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7fe f8c6 	bl	80009f0 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002868:	f7fe f8c2 	bl	80009f0 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e087      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287a:	4b27      	ldr	r3, [pc, #156]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69da      	ldr	r2, [r3, #28]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	019b      	lsls	r3, r3, #6
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	085b      	lsrs	r3, r3, #1
 800289e:	3b01      	subs	r3, #1
 80028a0:	041b      	lsls	r3, r3, #16
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	061b      	lsls	r3, r3, #24
 80028aa:	491b      	ldr	r1, [pc, #108]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b0:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <HAL_RCC_OscConfig+0x478>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b6:	f7fe f89b 	bl	80009f0 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028be:	f7fe f897 	bl	80009f0 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e05c      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d0:	4b11      	ldr	r3, [pc, #68]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x416>
 80028dc:	e054      	b.n	8002988 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028de:	4b10      	ldr	r3, [pc, #64]	; (8002920 <HAL_RCC_OscConfig+0x478>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fe f884 	bl	80009f0 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ec:	f7fe f880 	bl	80009f0 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e045      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x444>
 800290a:	e03d      	b.n	8002988 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d107      	bne.n	8002924 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e038      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
 8002918:	40023800 	.word	0x40023800
 800291c:	40007000 	.word	0x40007000
 8002920:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002924:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <HAL_RCC_OscConfig+0x4ec>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d028      	beq.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d121      	bne.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294a:	429a      	cmp	r2, r3
 800294c:	d11a      	bne.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002954:	4013      	ands	r3, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800295a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800295c:	4293      	cmp	r3, r2
 800295e:	d111      	bne.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	3b01      	subs	r3, #1
 800296e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d107      	bne.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800

08002998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0cc      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029ac:	4b68      	ldr	r3, [pc, #416]	; (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d90c      	bls.n	80029d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ba:	4b65      	ldr	r3, [pc, #404]	; (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b63      	ldr	r3, [pc, #396]	; (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0b8      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d020      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029ec:	4b59      	ldr	r3, [pc, #356]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	4a58      	ldr	r2, [pc, #352]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a04:	4b53      	ldr	r3, [pc, #332]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4a52      	ldr	r2, [pc, #328]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a10:	4b50      	ldr	r3, [pc, #320]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	494d      	ldr	r1, [pc, #308]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d044      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d107      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a36:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d119      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e07f      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d003      	beq.n	8002a56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a56:	4b3f      	ldr	r3, [pc, #252]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e06f      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a66:	4b3b      	ldr	r3, [pc, #236]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e067      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a76:	4b37      	ldr	r3, [pc, #220]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f023 0203 	bic.w	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4934      	ldr	r1, [pc, #208]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a88:	f7fd ffb2 	bl	80009f0 <HAL_GetTick>
 8002a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a90:	f7fd ffae 	bl	80009f0 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e04f      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa6:	4b2b      	ldr	r3, [pc, #172]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 020c 	and.w	r2, r3, #12
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d1eb      	bne.n	8002a90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d20c      	bcs.n	8002ae0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b22      	ldr	r3, [pc, #136]	; (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ace:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e032      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aec:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	4916      	ldr	r1, [pc, #88]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b0a:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	490e      	ldr	r1, [pc, #56]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b1e:	f000 f821 	bl	8002b64 <HAL_RCC_GetSysClockFreq>
 8002b22:	4602      	mov	r2, r0
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	490a      	ldr	r1, [pc, #40]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 8002b30:	5ccb      	ldrb	r3, [r1, r3]
 8002b32:	fa22 f303 	lsr.w	r3, r2, r3
 8002b36:	4a09      	ldr	r2, [pc, #36]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fd ff12 	bl	8000968 <HAL_InitTick>

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40023c00 	.word	0x40023c00
 8002b54:	40023800 	.word	0x40023800
 8002b58:	080079c4 	.word	0x080079c4
 8002b5c:	20000000 	.word	0x20000000
 8002b60:	20000004 	.word	0x20000004

08002b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b68:	b090      	sub	sp, #64	; 0x40
 8002b6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b70:	2300      	movs	r3, #0
 8002b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b74:	2300      	movs	r3, #0
 8002b76:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b7c:	4b59      	ldr	r3, [pc, #356]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d00d      	beq.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	f200 80a1 	bhi.w	8002cd0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0x34>
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d003      	beq.n	8002b9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b96:	e09b      	b.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b98:	4b53      	ldr	r3, [pc, #332]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b9a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b9c:	e09b      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b9e:	4b53      	ldr	r3, [pc, #332]	; (8002cec <HAL_RCC_GetSysClockFreq+0x188>)
 8002ba0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ba2:	e098      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ba4:	4b4f      	ldr	r3, [pc, #316]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bae:	4b4d      	ldr	r3, [pc, #308]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d028      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bba:	4b4a      	ldr	r3, [pc, #296]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	099b      	lsrs	r3, r3, #6
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	623b      	str	r3, [r7, #32]
 8002bc4:	627a      	str	r2, [r7, #36]	; 0x24
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4b47      	ldr	r3, [pc, #284]	; (8002cec <HAL_RCC_GetSysClockFreq+0x188>)
 8002bd0:	fb03 f201 	mul.w	r2, r3, r1
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	fb00 f303 	mul.w	r3, r0, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	4a43      	ldr	r2, [pc, #268]	; (8002cec <HAL_RCC_GetSysClockFreq+0x188>)
 8002bde:	fba0 1202 	umull	r1, r2, r0, r2
 8002be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002be4:	460a      	mov	r2, r1
 8002be6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bea:	4413      	add	r3, r2
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	61fa      	str	r2, [r7, #28]
 8002bf6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bfa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bfe:	f7fd faf1 	bl	80001e4 <__aeabi_uldivmod>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4613      	mov	r3, r2
 8002c08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c0a:	e053      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c0c:	4b35      	ldr	r3, [pc, #212]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	099b      	lsrs	r3, r3, #6
 8002c12:	2200      	movs	r2, #0
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	617a      	str	r2, [r7, #20]
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c1e:	f04f 0b00 	mov.w	fp, #0
 8002c22:	4652      	mov	r2, sl
 8002c24:	465b      	mov	r3, fp
 8002c26:	f04f 0000 	mov.w	r0, #0
 8002c2a:	f04f 0100 	mov.w	r1, #0
 8002c2e:	0159      	lsls	r1, r3, #5
 8002c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c34:	0150      	lsls	r0, r2, #5
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	ebb2 080a 	subs.w	r8, r2, sl
 8002c3e:	eb63 090b 	sbc.w	r9, r3, fp
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c56:	ebb2 0408 	subs.w	r4, r2, r8
 8002c5a:	eb63 0509 	sbc.w	r5, r3, r9
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	00eb      	lsls	r3, r5, #3
 8002c68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c6c:	00e2      	lsls	r2, r4, #3
 8002c6e:	4614      	mov	r4, r2
 8002c70:	461d      	mov	r5, r3
 8002c72:	eb14 030a 	adds.w	r3, r4, sl
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	eb45 030b 	adc.w	r3, r5, fp
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	028b      	lsls	r3, r1, #10
 8002c8e:	4621      	mov	r1, r4
 8002c90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c94:	4621      	mov	r1, r4
 8002c96:	028a      	lsls	r2, r1, #10
 8002c98:	4610      	mov	r0, r2
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	60fa      	str	r2, [r7, #12]
 8002ca4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ca8:	f7fd fa9c 	bl	80001e4 <__aeabi_uldivmod>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002cc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ccc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cce:	e002      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cd2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3740      	adds	r7, #64	; 0x40
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	00f42400 	.word	0x00f42400
 8002cec:	017d7840 	.word	0x017d7840

08002cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000000 	.word	0x20000000

08002d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e041      	b.n	8002d9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7fd fd56 	bl	80007e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3304      	adds	r3, #4
 8002d44:	4619      	mov	r1, r3
 8002d46:	4610      	mov	r0, r2
 8002d48:	f000 fa76 	bl	8003238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d001      	beq.n	8002dc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e044      	b.n	8002e4a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a1e      	ldr	r2, [pc, #120]	; (8002e58 <HAL_TIM_Base_Start_IT+0xb0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d018      	beq.n	8002e14 <HAL_TIM_Base_Start_IT+0x6c>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dea:	d013      	beq.n	8002e14 <HAL_TIM_Base_Start_IT+0x6c>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a1a      	ldr	r2, [pc, #104]	; (8002e5c <HAL_TIM_Base_Start_IT+0xb4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00e      	beq.n	8002e14 <HAL_TIM_Base_Start_IT+0x6c>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a19      	ldr	r2, [pc, #100]	; (8002e60 <HAL_TIM_Base_Start_IT+0xb8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d009      	beq.n	8002e14 <HAL_TIM_Base_Start_IT+0x6c>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a17      	ldr	r2, [pc, #92]	; (8002e64 <HAL_TIM_Base_Start_IT+0xbc>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d004      	beq.n	8002e14 <HAL_TIM_Base_Start_IT+0x6c>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a16      	ldr	r2, [pc, #88]	; (8002e68 <HAL_TIM_Base_Start_IT+0xc0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d111      	bne.n	8002e38 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2b06      	cmp	r3, #6
 8002e24:	d010      	beq.n	8002e48 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f042 0201 	orr.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e36:	e007      	b.n	8002e48 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40010000 	.word	0x40010000
 8002e5c:	40000400 	.word	0x40000400
 8002e60:	40000800 	.word	0x40000800
 8002e64:	40000c00 	.word	0x40000c00
 8002e68:	40014000 	.word	0x40014000

08002e6c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e041      	b.n	8002f02 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f839 	bl	8002f0a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4610      	mov	r0, r2
 8002eac:	f000 f9c4 	bl	8003238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b082      	sub	sp, #8
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d122      	bne.n	8002f7a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d11b      	bne.n	8002f7a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f06f 0202 	mvn.w	r2, #2
 8002f4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f94b 	bl	80031fc <HAL_TIM_IC_CaptureCallback>
 8002f66:	e005      	b.n	8002f74 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f93d 	bl	80031e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f94e 	bl	8003210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d122      	bne.n	8002fce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d11b      	bne.n	8002fce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f06f 0204 	mvn.w	r2, #4
 8002f9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f921 	bl	80031fc <HAL_TIM_IC_CaptureCallback>
 8002fba:	e005      	b.n	8002fc8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f913 	bl	80031e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f924 	bl	8003210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d122      	bne.n	8003022 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d11b      	bne.n	8003022 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f06f 0208 	mvn.w	r2, #8
 8002ff2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2204      	movs	r2, #4
 8002ff8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f8f7 	bl	80031fc <HAL_TIM_IC_CaptureCallback>
 800300e:	e005      	b.n	800301c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f8e9 	bl	80031e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f8fa 	bl	8003210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	2b10      	cmp	r3, #16
 800302e:	d122      	bne.n	8003076 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f003 0310 	and.w	r3, r3, #16
 800303a:	2b10      	cmp	r3, #16
 800303c:	d11b      	bne.n	8003076 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f06f 0210 	mvn.w	r2, #16
 8003046:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2208      	movs	r2, #8
 800304c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f8cd 	bl	80031fc <HAL_TIM_IC_CaptureCallback>
 8003062:	e005      	b.n	8003070 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f8bf 	bl	80031e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f8d0 	bl	8003210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b01      	cmp	r3, #1
 8003082:	d10e      	bne.n	80030a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b01      	cmp	r3, #1
 8003090:	d107      	bne.n	80030a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f06f 0201 	mvn.w	r2, #1
 800309a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7fd fa23 	bl	80004e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ac:	2b80      	cmp	r3, #128	; 0x80
 80030ae:	d10e      	bne.n	80030ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ba:	2b80      	cmp	r3, #128	; 0x80
 80030bc:	d107      	bne.n	80030ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 facb 	bl	8003664 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d8:	2b40      	cmp	r3, #64	; 0x40
 80030da:	d10e      	bne.n	80030fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e6:	2b40      	cmp	r3, #64	; 0x40
 80030e8:	d107      	bne.n	80030fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f895 	bl	8003224 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b20      	cmp	r3, #32
 8003106:	d10e      	bne.n	8003126 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	2b20      	cmp	r3, #32
 8003114:	d107      	bne.n	8003126 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f06f 0220 	mvn.w	r2, #32
 800311e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 fa95 	bl	8003650 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_TIM_OC_ConfigChannel+0x1e>
 800314a:	2302      	movs	r3, #2
 800314c:	e048      	b.n	80031e0 <HAL_TIM_OC_ConfigChannel+0xb0>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b0c      	cmp	r3, #12
 800315a:	d839      	bhi.n	80031d0 <HAL_TIM_OC_ConfigChannel+0xa0>
 800315c:	a201      	add	r2, pc, #4	; (adr r2, 8003164 <HAL_TIM_OC_ConfigChannel+0x34>)
 800315e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003162:	bf00      	nop
 8003164:	08003199 	.word	0x08003199
 8003168:	080031d1 	.word	0x080031d1
 800316c:	080031d1 	.word	0x080031d1
 8003170:	080031d1 	.word	0x080031d1
 8003174:	080031a7 	.word	0x080031a7
 8003178:	080031d1 	.word	0x080031d1
 800317c:	080031d1 	.word	0x080031d1
 8003180:	080031d1 	.word	0x080031d1
 8003184:	080031b5 	.word	0x080031b5
 8003188:	080031d1 	.word	0x080031d1
 800318c:	080031d1 	.word	0x080031d1
 8003190:	080031d1 	.word	0x080031d1
 8003194:	080031c3 	.word	0x080031c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 f8ca 	bl	8003338 <TIM_OC1_SetConfig>
      break;
 80031a4:	e017      	b.n	80031d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 f929 	bl	8003404 <TIM_OC2_SetConfig>
      break;
 80031b2:	e010      	b.n	80031d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 f98e 	bl	80034dc <TIM_OC3_SetConfig>
      break;
 80031c0:	e009      	b.n	80031d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68b9      	ldr	r1, [r7, #8]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 f9f1 	bl	80035b0 <TIM_OC4_SetConfig>
      break;
 80031ce:	e002      	b.n	80031d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	75fb      	strb	r3, [r7, #23]
      break;
 80031d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031de:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a34      	ldr	r2, [pc, #208]	; (800331c <TIM_Base_SetConfig+0xe4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00f      	beq.n	8003270 <TIM_Base_SetConfig+0x38>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003256:	d00b      	beq.n	8003270 <TIM_Base_SetConfig+0x38>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a31      	ldr	r2, [pc, #196]	; (8003320 <TIM_Base_SetConfig+0xe8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d007      	beq.n	8003270 <TIM_Base_SetConfig+0x38>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a30      	ldr	r2, [pc, #192]	; (8003324 <TIM_Base_SetConfig+0xec>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d003      	beq.n	8003270 <TIM_Base_SetConfig+0x38>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a2f      	ldr	r2, [pc, #188]	; (8003328 <TIM_Base_SetConfig+0xf0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d108      	bne.n	8003282 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a25      	ldr	r2, [pc, #148]	; (800331c <TIM_Base_SetConfig+0xe4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d01b      	beq.n	80032c2 <TIM_Base_SetConfig+0x8a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003290:	d017      	beq.n	80032c2 <TIM_Base_SetConfig+0x8a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a22      	ldr	r2, [pc, #136]	; (8003320 <TIM_Base_SetConfig+0xe8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d013      	beq.n	80032c2 <TIM_Base_SetConfig+0x8a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a21      	ldr	r2, [pc, #132]	; (8003324 <TIM_Base_SetConfig+0xec>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00f      	beq.n	80032c2 <TIM_Base_SetConfig+0x8a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a20      	ldr	r2, [pc, #128]	; (8003328 <TIM_Base_SetConfig+0xf0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00b      	beq.n	80032c2 <TIM_Base_SetConfig+0x8a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a1f      	ldr	r2, [pc, #124]	; (800332c <TIM_Base_SetConfig+0xf4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d007      	beq.n	80032c2 <TIM_Base_SetConfig+0x8a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a1e      	ldr	r2, [pc, #120]	; (8003330 <TIM_Base_SetConfig+0xf8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d003      	beq.n	80032c2 <TIM_Base_SetConfig+0x8a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a1d      	ldr	r2, [pc, #116]	; (8003334 <TIM_Base_SetConfig+0xfc>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d108      	bne.n	80032d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a08      	ldr	r2, [pc, #32]	; (800331c <TIM_Base_SetConfig+0xe4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d103      	bne.n	8003308 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	615a      	str	r2, [r3, #20]
}
 800330e:	bf00      	nop
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40010000 	.word	0x40010000
 8003320:	40000400 	.word	0x40000400
 8003324:	40000800 	.word	0x40000800
 8003328:	40000c00 	.word	0x40000c00
 800332c:	40014000 	.word	0x40014000
 8003330:	40014400 	.word	0x40014400
 8003334:	40014800 	.word	0x40014800

08003338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	f023 0201 	bic.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0303 	bic.w	r3, r3, #3
 800336e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f023 0302 	bic.w	r3, r3, #2
 8003380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a1c      	ldr	r2, [pc, #112]	; (8003400 <TIM_OC1_SetConfig+0xc8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d10c      	bne.n	80033ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f023 0308 	bic.w	r3, r3, #8
 800339a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f023 0304 	bic.w	r3, r3, #4
 80033ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a13      	ldr	r2, [pc, #76]	; (8003400 <TIM_OC1_SetConfig+0xc8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d111      	bne.n	80033da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	621a      	str	r2, [r3, #32]
}
 80033f4:	bf00      	nop
 80033f6:	371c      	adds	r7, #28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	40010000 	.word	0x40010000

08003404 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	f023 0210 	bic.w	r2, r3, #16
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800343a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f023 0320 	bic.w	r3, r3, #32
 800344e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a1e      	ldr	r2, [pc, #120]	; (80034d8 <TIM_OC2_SetConfig+0xd4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d10d      	bne.n	8003480 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800346a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800347e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a15      	ldr	r2, [pc, #84]	; (80034d8 <TIM_OC2_SetConfig+0xd4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d113      	bne.n	80034b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800348e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003496:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	621a      	str	r2, [r3, #32]
}
 80034ca:	bf00      	nop
 80034cc:	371c      	adds	r7, #28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40010000 	.word	0x40010000

080034dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0303 	bic.w	r3, r3, #3
 8003512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	021b      	lsls	r3, r3, #8
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	4313      	orrs	r3, r2
 8003530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a1d      	ldr	r2, [pc, #116]	; (80035ac <TIM_OC3_SetConfig+0xd0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d10d      	bne.n	8003556 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a14      	ldr	r2, [pc, #80]	; (80035ac <TIM_OC3_SetConfig+0xd0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d113      	bne.n	8003586 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800356c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	621a      	str	r2, [r3, #32]
}
 80035a0:	bf00      	nop
 80035a2:	371c      	adds	r7, #28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	40010000 	.word	0x40010000

080035b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	021b      	lsls	r3, r3, #8
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	031b      	lsls	r3, r3, #12
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a10      	ldr	r2, [pc, #64]	; (800364c <TIM_OC4_SetConfig+0x9c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d109      	bne.n	8003624 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003616:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	019b      	lsls	r3, r3, #6
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	621a      	str	r2, [r3, #32]
}
 800363e:	bf00      	nop
 8003640:	371c      	adds	r7, #28
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40010000 	.word	0x40010000

08003650 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003678:	b084      	sub	sp, #16
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	f107 001c 	add.w	r0, r7, #28
 8003686:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	2b01      	cmp	r3, #1
 800368e:	d122      	bne.n	80036d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80036a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80036b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d105      	bne.n	80036ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f001 fbee 	bl	8004eac <USB_CoreReset>
 80036d0:	4603      	mov	r3, r0
 80036d2:	73fb      	strb	r3, [r7, #15]
 80036d4:	e01a      	b.n	800370c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f001 fbe2 	bl	8004eac <USB_CoreReset>
 80036e8:	4603      	mov	r3, r0
 80036ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80036ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d106      	bne.n	8003700 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	639a      	str	r2, [r3, #56]	; 0x38
 80036fe:	e005      	b.n	800370c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800370c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370e:	2b01      	cmp	r3, #1
 8003710:	d10b      	bne.n	800372a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f043 0206 	orr.w	r2, r3, #6
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f043 0220 	orr.w	r2, r3, #32
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800372a:	7bfb      	ldrb	r3, [r7, #15]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003736:	b004      	add	sp, #16
 8003738:	4770      	bx	lr
	...

0800373c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	4613      	mov	r3, r2
 8003748:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d165      	bne.n	800381c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4a41      	ldr	r2, [pc, #260]	; (8003858 <USB_SetTurnaroundTime+0x11c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d906      	bls.n	8003766 <USB_SetTurnaroundTime+0x2a>
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	4a40      	ldr	r2, [pc, #256]	; (800385c <USB_SetTurnaroundTime+0x120>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d202      	bcs.n	8003766 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003760:	230f      	movs	r3, #15
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	e062      	b.n	800382c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	4a3c      	ldr	r2, [pc, #240]	; (800385c <USB_SetTurnaroundTime+0x120>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d306      	bcc.n	800377c <USB_SetTurnaroundTime+0x40>
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	4a3b      	ldr	r2, [pc, #236]	; (8003860 <USB_SetTurnaroundTime+0x124>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d202      	bcs.n	800377c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003776:	230e      	movs	r3, #14
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	e057      	b.n	800382c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4a38      	ldr	r2, [pc, #224]	; (8003860 <USB_SetTurnaroundTime+0x124>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d306      	bcc.n	8003792 <USB_SetTurnaroundTime+0x56>
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	4a37      	ldr	r2, [pc, #220]	; (8003864 <USB_SetTurnaroundTime+0x128>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d202      	bcs.n	8003792 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800378c:	230d      	movs	r3, #13
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	e04c      	b.n	800382c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	4a33      	ldr	r2, [pc, #204]	; (8003864 <USB_SetTurnaroundTime+0x128>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d306      	bcc.n	80037a8 <USB_SetTurnaroundTime+0x6c>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	4a32      	ldr	r2, [pc, #200]	; (8003868 <USB_SetTurnaroundTime+0x12c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d802      	bhi.n	80037a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80037a2:	230c      	movs	r3, #12
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	e041      	b.n	800382c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	4a2f      	ldr	r2, [pc, #188]	; (8003868 <USB_SetTurnaroundTime+0x12c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d906      	bls.n	80037be <USB_SetTurnaroundTime+0x82>
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4a2e      	ldr	r2, [pc, #184]	; (800386c <USB_SetTurnaroundTime+0x130>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d802      	bhi.n	80037be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80037b8:	230b      	movs	r3, #11
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	e036      	b.n	800382c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4a2a      	ldr	r2, [pc, #168]	; (800386c <USB_SetTurnaroundTime+0x130>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d906      	bls.n	80037d4 <USB_SetTurnaroundTime+0x98>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4a29      	ldr	r2, [pc, #164]	; (8003870 <USB_SetTurnaroundTime+0x134>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d802      	bhi.n	80037d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80037ce:	230a      	movs	r3, #10
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	e02b      	b.n	800382c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4a26      	ldr	r2, [pc, #152]	; (8003870 <USB_SetTurnaroundTime+0x134>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d906      	bls.n	80037ea <USB_SetTurnaroundTime+0xae>
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4a25      	ldr	r2, [pc, #148]	; (8003874 <USB_SetTurnaroundTime+0x138>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d202      	bcs.n	80037ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80037e4:	2309      	movs	r3, #9
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	e020      	b.n	800382c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	4a21      	ldr	r2, [pc, #132]	; (8003874 <USB_SetTurnaroundTime+0x138>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d306      	bcc.n	8003800 <USB_SetTurnaroundTime+0xc4>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	4a20      	ldr	r2, [pc, #128]	; (8003878 <USB_SetTurnaroundTime+0x13c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d802      	bhi.n	8003800 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80037fa:	2308      	movs	r3, #8
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	e015      	b.n	800382c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	4a1d      	ldr	r2, [pc, #116]	; (8003878 <USB_SetTurnaroundTime+0x13c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d906      	bls.n	8003816 <USB_SetTurnaroundTime+0xda>
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	4a1c      	ldr	r2, [pc, #112]	; (800387c <USB_SetTurnaroundTime+0x140>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d202      	bcs.n	8003816 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003810:	2307      	movs	r3, #7
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	e00a      	b.n	800382c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003816:	2306      	movs	r3, #6
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	e007      	b.n	800382c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d102      	bne.n	8003828 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003822:	2309      	movs	r3, #9
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	e001      	b.n	800382c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003828:	2309      	movs	r3, #9
 800382a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	029b      	lsls	r3, r3, #10
 8003840:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003844:	431a      	orrs	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	371c      	adds	r7, #28
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	00d8acbf 	.word	0x00d8acbf
 800385c:	00e4e1c0 	.word	0x00e4e1c0
 8003860:	00f42400 	.word	0x00f42400
 8003864:	01067380 	.word	0x01067380
 8003868:	011a499f 	.word	0x011a499f
 800386c:	01312cff 	.word	0x01312cff
 8003870:	014ca43f 	.word	0x014ca43f
 8003874:	016e3600 	.word	0x016e3600
 8003878:	01a6ab1f 	.word	0x01a6ab1f
 800387c:	01e84800 	.word	0x01e84800

08003880 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f043 0201 	orr.w	r2, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f023 0201 	bic.w	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d115      	bne.n	8003912 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80038f2:	2001      	movs	r0, #1
 80038f4:	f7fd f888 	bl	8000a08 <HAL_Delay>
      ms++;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	3301      	adds	r3, #1
 80038fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f001 fa45 	bl	8004d8e <USB_GetMode>
 8003904:	4603      	mov	r3, r0
 8003906:	2b01      	cmp	r3, #1
 8003908:	d01e      	beq.n	8003948 <USB_SetCurrentMode+0x84>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b31      	cmp	r3, #49	; 0x31
 800390e:	d9f0      	bls.n	80038f2 <USB_SetCurrentMode+0x2e>
 8003910:	e01a      	b.n	8003948 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003912:	78fb      	ldrb	r3, [r7, #3]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d115      	bne.n	8003944 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003924:	2001      	movs	r0, #1
 8003926:	f7fd f86f 	bl	8000a08 <HAL_Delay>
      ms++;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	3301      	adds	r3, #1
 800392e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f001 fa2c 	bl	8004d8e <USB_GetMode>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <USB_SetCurrentMode+0x84>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b31      	cmp	r3, #49	; 0x31
 8003940:	d9f0      	bls.n	8003924 <USB_SetCurrentMode+0x60>
 8003942:	e001      	b.n	8003948 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e005      	b.n	8003954 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2b32      	cmp	r3, #50	; 0x32
 800394c:	d101      	bne.n	8003952 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800395c:	b084      	sub	sp, #16
 800395e:	b580      	push	{r7, lr}
 8003960:	b086      	sub	sp, #24
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800396a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003976:	2300      	movs	r3, #0
 8003978:	613b      	str	r3, [r7, #16]
 800397a:	e009      	b.n	8003990 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	3340      	adds	r3, #64	; 0x40
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	2200      	movs	r2, #0
 8003988:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	3301      	adds	r3, #1
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	2b0e      	cmp	r3, #14
 8003994:	d9f2      	bls.n	800397c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003998:	2b00      	cmp	r3, #0
 800399a:	d11c      	bne.n	80039d6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039aa:	f043 0302 	orr.w	r3, r3, #2
 80039ae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039cc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	639a      	str	r2, [r3, #56]	; 0x38
 80039d4:	e00b      	b.n	80039ee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80039f4:	461a      	mov	r2, r3
 80039f6:	2300      	movs	r3, #0
 80039f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a00:	4619      	mov	r1, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a08:	461a      	mov	r2, r3
 8003a0a:	680b      	ldr	r3, [r1, #0]
 8003a0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d10c      	bne.n	8003a2e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d104      	bne.n	8003a24 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f965 	bl	8003cec <USB_SetDevSpeed>
 8003a22:	e008      	b.n	8003a36 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a24:	2101      	movs	r1, #1
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f960 	bl	8003cec <USB_SetDevSpeed>
 8003a2c:	e003      	b.n	8003a36 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a2e:	2103      	movs	r1, #3
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f95b 	bl	8003cec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a36:	2110      	movs	r1, #16
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f8f3 	bl	8003c24 <USB_FlushTxFifo>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f91f 	bl	8003c8c <USB_FlushRxFifo>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5e:	461a      	mov	r2, r3
 8003a60:	2300      	movs	r3, #0
 8003a62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a76:	461a      	mov	r2, r3
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	e043      	b.n	8003b0a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a98:	d118      	bne.n	8003acc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10a      	bne.n	8003ab6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aac:	461a      	mov	r2, r3
 8003aae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	e013      	b.n	8003ade <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	015a      	lsls	r2, r3, #5
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	e008      	b.n	8003ade <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2300      	movs	r3, #0
 8003adc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aea:	461a      	mov	r2, r3
 8003aec:	2300      	movs	r3, #0
 8003aee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afc:	461a      	mov	r2, r3
 8003afe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	3301      	adds	r3, #1
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d3b7      	bcc.n	8003a82 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b12:	2300      	movs	r3, #0
 8003b14:	613b      	str	r3, [r7, #16]
 8003b16:	e043      	b.n	8003ba0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b2e:	d118      	bne.n	8003b62 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10a      	bne.n	8003b4c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b42:	461a      	mov	r2, r3
 8003b44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	e013      	b.n	8003b74 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b58:	461a      	mov	r2, r3
 8003b5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	e008      	b.n	8003b74 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b6e:	461a      	mov	r2, r3
 8003b70:	2300      	movs	r3, #0
 8003b72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b80:	461a      	mov	r2, r3
 8003b82:	2300      	movs	r3, #0
 8003b84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b92:	461a      	mov	r2, r3
 8003b94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d3b7      	bcc.n	8003b18 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003bc8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d105      	bne.n	8003bdc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	f043 0210 	orr.w	r2, r3, #16
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699a      	ldr	r2, [r3, #24]
 8003be0:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <USB_DevInit+0x2c4>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d005      	beq.n	8003bfa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f043 0208 	orr.w	r2, r3, #8
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d107      	bne.n	8003c10 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c08:	f043 0304 	orr.w	r3, r3, #4
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c1c:	b004      	add	sp, #16
 8003c1e:	4770      	bx	lr
 8003c20:	803c3800 	.word	0x803c3800

08003c24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3301      	adds	r3, #1
 8003c36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4a13      	ldr	r2, [pc, #76]	; (8003c88 <USB_FlushTxFifo+0x64>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d901      	bls.n	8003c44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e01b      	b.n	8003c7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	daf2      	bge.n	8003c32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	019b      	lsls	r3, r3, #6
 8003c54:	f043 0220 	orr.w	r2, r3, #32
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <USB_FlushTxFifo+0x64>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d901      	bls.n	8003c6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e006      	b.n	8003c7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d0f0      	beq.n	8003c5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	00030d40 	.word	0x00030d40

08003c8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4a11      	ldr	r2, [pc, #68]	; (8003ce8 <USB_FlushRxFifo+0x5c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d901      	bls.n	8003caa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e018      	b.n	8003cdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	daf2      	bge.n	8003c98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2210      	movs	r2, #16
 8003cba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4a08      	ldr	r2, [pc, #32]	; (8003ce8 <USB_FlushRxFifo+0x5c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d901      	bls.n	8003cce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e006      	b.n	8003cdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0310 	and.w	r3, r3, #16
 8003cd6:	2b10      	cmp	r3, #16
 8003cd8:	d0f0      	beq.n	8003cbc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	00030d40 	.word	0x00030d40

08003cec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	78fb      	ldrb	r3, [r7, #3]
 8003d06:	68f9      	ldr	r1, [r7, #12]
 8003d08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b087      	sub	sp, #28
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 0306 	and.w	r3, r3, #6
 8003d36:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d102      	bne.n	8003d44 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	75fb      	strb	r3, [r7, #23]
 8003d42:	e00a      	b.n	8003d5a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d002      	beq.n	8003d50 <USB_GetDevSpeed+0x32>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2b06      	cmp	r3, #6
 8003d4e:	d102      	bne.n	8003d56 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003d50:	2302      	movs	r3, #2
 8003d52:	75fb      	strb	r3, [r7, #23]
 8003d54:	e001      	b.n	8003d5a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003d56:	230f      	movs	r3, #15
 8003d58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	371c      	adds	r7, #28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	785b      	ldrb	r3, [r3, #1]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d13a      	bne.n	8003dfa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8a:	69da      	ldr	r2, [r3, #28]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	2101      	movs	r1, #1
 8003d96:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	68f9      	ldr	r1, [r7, #12]
 8003d9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003da2:	4313      	orrs	r3, r2
 8003da4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	015a      	lsls	r2, r3, #5
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4413      	add	r3, r2
 8003dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d155      	bne.n	8003e68 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	791b      	ldrb	r3, [r3, #4]
 8003dd6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003dd8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	059b      	lsls	r3, r3, #22
 8003dde:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003de0:	4313      	orrs	r3, r2
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	0151      	lsls	r1, r2, #5
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	440a      	add	r2, r1
 8003dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	e036      	b.n	8003e68 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e00:	69da      	ldr	r2, [r3, #28]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e10:	041b      	lsls	r3, r3, #16
 8003e12:	68f9      	ldr	r1, [r7, #12]
 8003e14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d11a      	bne.n	8003e68 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	791b      	ldrb	r3, [r3, #4]
 8003e4c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e4e:	430b      	orrs	r3, r1
 8003e50:	4313      	orrs	r3, r2
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	0151      	lsls	r1, r2, #5
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	440a      	add	r2, r1
 8003e5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e66:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
	...

08003e78 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	785b      	ldrb	r3, [r3, #1]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d161      	bne.n	8003f58 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003eaa:	d11f      	bne.n	8003eec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	0151      	lsls	r1, r2, #5
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	440a      	add	r2, r1
 8003ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ec6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003eca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	0151      	lsls	r1, r2, #5
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	440a      	add	r2, r1
 8003ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003eea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	f003 030f 	and.w	r3, r3, #15
 8003efc:	2101      	movs	r1, #1
 8003efe:	fa01 f303 	lsl.w	r3, r1, r3
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	68f9      	ldr	r1, [r7, #12]
 8003f08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f16:	69da      	ldr	r2, [r3, #28]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	f003 030f 	and.w	r3, r3, #15
 8003f20:	2101      	movs	r1, #1
 8003f22:	fa01 f303 	lsl.w	r3, r1, r3
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	68f9      	ldr	r1, [r7, #12]
 8003f2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f30:	4013      	ands	r3, r2
 8003f32:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	0159      	lsls	r1, r3, #5
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	440b      	add	r3, r1
 8003f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4b35      	ldr	r3, [pc, #212]	; (8004028 <USB_DeactivateEndpoint+0x1b0>)
 8003f52:	4013      	ands	r3, r2
 8003f54:	600b      	str	r3, [r1, #0]
 8003f56:	e060      	b.n	800401a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f6e:	d11f      	bne.n	8003fb0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	0151      	lsls	r1, r2, #5
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	440a      	add	r2, r1
 8003f86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f8e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	0151      	lsls	r1, r2, #5
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	440a      	add	r2, r1
 8003fa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003faa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	f003 030f 	and.w	r3, r3, #15
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc6:	041b      	lsls	r3, r3, #16
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	68f9      	ldr	r1, [r7, #12]
 8003fcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fda:	69da      	ldr	r2, [r3, #28]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	f003 030f 	and.w	r3, r3, #15
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fea:	041b      	lsls	r3, r3, #16
 8003fec:	43db      	mvns	r3, r3
 8003fee:	68f9      	ldr	r1, [r7, #12]
 8003ff0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	0159      	lsls	r1, r3, #5
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	440b      	add	r3, r1
 800400e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004012:	4619      	mov	r1, r3
 8004014:	4b05      	ldr	r3, [pc, #20]	; (800402c <USB_DeactivateEndpoint+0x1b4>)
 8004016:	4013      	ands	r3, r2
 8004018:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	ec337800 	.word	0xec337800
 800402c:	eff37800 	.word	0xeff37800

08004030 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08a      	sub	sp, #40	; 0x28
 8004034:	af02      	add	r7, sp, #8
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	4613      	mov	r3, r2
 800403c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	785b      	ldrb	r3, [r3, #1]
 800404c:	2b01      	cmp	r3, #1
 800404e:	f040 815c 	bne.w	800430a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d132      	bne.n	80040c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	015a      	lsls	r2, r3, #5
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	4413      	add	r3, r2
 8004062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	0151      	lsls	r1, r2, #5
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	440a      	add	r2, r1
 8004070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004074:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004078:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800407c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	0151      	lsls	r1, r2, #5
 8004090:	69fa      	ldr	r2, [r7, #28]
 8004092:	440a      	add	r2, r1
 8004094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004098:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800409c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	0151      	lsls	r1, r2, #5
 80040b0:	69fa      	ldr	r2, [r7, #28]
 80040b2:	440a      	add	r2, r1
 80040b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040b8:	0cdb      	lsrs	r3, r3, #19
 80040ba:	04db      	lsls	r3, r3, #19
 80040bc:	6113      	str	r3, [r2, #16]
 80040be:	e074      	b.n	80041aa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	0151      	lsls	r1, r2, #5
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	440a      	add	r2, r1
 80040d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040da:	0cdb      	lsrs	r3, r3, #19
 80040dc:	04db      	lsls	r3, r3, #19
 80040de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	0151      	lsls	r1, r2, #5
 80040f2:	69fa      	ldr	r2, [r7, #28]
 80040f4:	440a      	add	r2, r1
 80040f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004102:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004110:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	6999      	ldr	r1, [r3, #24]
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	440b      	add	r3, r1
 800411c:	1e59      	subs	r1, r3, #1
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	fbb1 f3f3 	udiv	r3, r1, r3
 8004126:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004128:	4b9d      	ldr	r3, [pc, #628]	; (80043a0 <USB_EPStartXfer+0x370>)
 800412a:	400b      	ands	r3, r1
 800412c:	69b9      	ldr	r1, [r7, #24]
 800412e:	0148      	lsls	r0, r1, #5
 8004130:	69f9      	ldr	r1, [r7, #28]
 8004132:	4401      	add	r1, r0
 8004134:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004138:	4313      	orrs	r3, r2
 800413a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004152:	69b9      	ldr	r1, [r7, #24]
 8004154:	0148      	lsls	r0, r1, #5
 8004156:	69f9      	ldr	r1, [r7, #28]
 8004158:	4401      	add	r1, r0
 800415a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800415e:	4313      	orrs	r3, r2
 8004160:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	791b      	ldrb	r3, [r3, #4]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d11f      	bne.n	80041aa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	4413      	add	r3, r2
 8004172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	0151      	lsls	r1, r2, #5
 800417c:	69fa      	ldr	r2, [r7, #28]
 800417e:	440a      	add	r2, r1
 8004180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004184:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004188:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	0151      	lsls	r1, r2, #5
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	440a      	add	r2, r1
 80041a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d14b      	bne.n	8004248 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d009      	beq.n	80041cc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c4:	461a      	mov	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	791b      	ldrb	r3, [r3, #4]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d128      	bne.n	8004226 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d110      	bne.n	8004206 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	0151      	lsls	r1, r2, #5
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	440a      	add	r2, r1
 80041fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	e00f      	b.n	8004226 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	0151      	lsls	r1, r2, #5
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	440a      	add	r2, r1
 800421c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004224:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	0151      	lsls	r1, r2, #5
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	440a      	add	r2, r1
 800423c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004240:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	e133      	b.n	80044b0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	0151      	lsls	r1, r2, #5
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	440a      	add	r2, r1
 800425e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004262:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004266:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	791b      	ldrb	r3, [r3, #4]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d015      	beq.n	800429c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 811b 	beq.w	80044b0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	2101      	movs	r1, #1
 800428c:	fa01 f303 	lsl.w	r3, r1, r3
 8004290:	69f9      	ldr	r1, [r7, #28]
 8004292:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004296:	4313      	orrs	r3, r2
 8004298:	634b      	str	r3, [r1, #52]	; 0x34
 800429a:	e109      	b.n	80044b0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d110      	bne.n	80042ce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	0151      	lsls	r1, r2, #5
 80042be:	69fa      	ldr	r2, [r7, #28]
 80042c0:	440a      	add	r2, r1
 80042c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	e00f      	b.n	80042ee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	0151      	lsls	r1, r2, #5
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	440a      	add	r2, r1
 80042e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	6919      	ldr	r1, [r3, #16]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	781a      	ldrb	r2, [r3, #0]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	b298      	uxth	r0, r3
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	4603      	mov	r3, r0
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 fade 	bl	80048c4 <USB_WritePacket>
 8004308:	e0d2      	b.n	80044b0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	0151      	lsls	r1, r2, #5
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	440a      	add	r2, r1
 8004320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004324:	0cdb      	lsrs	r3, r3, #19
 8004326:	04db      	lsls	r3, r3, #19
 8004328:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	0151      	lsls	r1, r2, #5
 800433c:	69fa      	ldr	r2, [r7, #28]
 800433e:	440a      	add	r2, r1
 8004340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004344:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004348:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800434c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d126      	bne.n	80043a4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800436c:	69b9      	ldr	r1, [r7, #24]
 800436e:	0148      	lsls	r0, r1, #5
 8004370:	69f9      	ldr	r1, [r7, #28]
 8004372:	4401      	add	r1, r0
 8004374:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004378:	4313      	orrs	r3, r2
 800437a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	0151      	lsls	r1, r2, #5
 800438e:	69fa      	ldr	r2, [r7, #28]
 8004390:	440a      	add	r2, r1
 8004392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004396:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800439a:	6113      	str	r3, [r2, #16]
 800439c:	e03a      	b.n	8004414 <USB_EPStartXfer+0x3e4>
 800439e:	bf00      	nop
 80043a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	699a      	ldr	r2, [r3, #24]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	4413      	add	r3, r2
 80043ae:	1e5a      	subs	r2, r3, #1
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	8afa      	ldrh	r2, [r7, #22]
 80043c0:	fb03 f202 	mul.w	r2, r3, r2
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d4:	691a      	ldr	r2, [r3, #16]
 80043d6:	8afb      	ldrh	r3, [r7, #22]
 80043d8:	04d9      	lsls	r1, r3, #19
 80043da:	4b38      	ldr	r3, [pc, #224]	; (80044bc <USB_EPStartXfer+0x48c>)
 80043dc:	400b      	ands	r3, r1
 80043de:	69b9      	ldr	r1, [r7, #24]
 80043e0:	0148      	lsls	r0, r1, #5
 80043e2:	69f9      	ldr	r1, [r7, #28]
 80043e4:	4401      	add	r1, r0
 80043e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043ea:	4313      	orrs	r3, r2
 80043ec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004404:	69b9      	ldr	r1, [r7, #24]
 8004406:	0148      	lsls	r0, r1, #5
 8004408:	69f9      	ldr	r1, [r7, #28]
 800440a:	4401      	add	r1, r0
 800440c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004410:	4313      	orrs	r3, r2
 8004412:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004414:	79fb      	ldrb	r3, [r7, #7]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d10d      	bne.n	8004436 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	6919      	ldr	r1, [r3, #16]
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004432:	460a      	mov	r2, r1
 8004434:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	791b      	ldrb	r3, [r3, #4]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d128      	bne.n	8004490 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444a:	2b00      	cmp	r3, #0
 800444c:	d110      	bne.n	8004470 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	0151      	lsls	r1, r2, #5
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	440a      	add	r2, r1
 8004464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004468:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	e00f      	b.n	8004490 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	0151      	lsls	r1, r2, #5
 8004482:	69fa      	ldr	r2, [r7, #28]
 8004484:	440a      	add	r2, r1
 8004486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800448a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800448e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	0151      	lsls	r1, r2, #5
 80044a2:	69fa      	ldr	r2, [r7, #28]
 80044a4:	440a      	add	r2, r1
 80044a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3720      	adds	r7, #32
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	1ff80000 	.word	0x1ff80000

080044c0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	4613      	mov	r3, r2
 80044cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	785b      	ldrb	r3, [r3, #1]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	f040 80ce 	bne.w	800467e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d132      	bne.n	8004550 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	0151      	lsls	r1, r2, #5
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	440a      	add	r2, r1
 8004500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004504:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004508:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800450c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	0151      	lsls	r1, r2, #5
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	440a      	add	r2, r1
 8004524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004528:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800452c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	4413      	add	r3, r2
 8004536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	0151      	lsls	r1, r2, #5
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	440a      	add	r2, r1
 8004544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004548:	0cdb      	lsrs	r3, r3, #19
 800454a:	04db      	lsls	r3, r3, #19
 800454c:	6113      	str	r3, [r2, #16]
 800454e:	e04e      	b.n	80045ee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	0151      	lsls	r1, r2, #5
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	440a      	add	r2, r1
 8004566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800456a:	0cdb      	lsrs	r3, r3, #19
 800456c:	04db      	lsls	r3, r3, #19
 800456e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	4413      	add	r3, r2
 8004578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	0151      	lsls	r1, r2, #5
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	440a      	add	r2, r1
 8004586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800458a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800458e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004592:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	699a      	ldr	r2, [r3, #24]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	429a      	cmp	r2, r3
 800459e:	d903      	bls.n	80045a8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	0151      	lsls	r1, r2, #5
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	440a      	add	r2, r1
 80045be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d4:	691a      	ldr	r2, [r3, #16]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045de:	6939      	ldr	r1, [r7, #16]
 80045e0:	0148      	lsls	r0, r1, #5
 80045e2:	6979      	ldr	r1, [r7, #20]
 80045e4:	4401      	add	r1, r0
 80045e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80045ea:	4313      	orrs	r3, r2
 80045ec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d11e      	bne.n	8004632 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d009      	beq.n	8004610 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004608:	461a      	mov	r2, r3
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	0151      	lsls	r1, r2, #5
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	440a      	add	r2, r1
 8004626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800462a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800462e:	6013      	str	r3, [r2, #0]
 8004630:	e097      	b.n	8004762 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	0151      	lsls	r1, r2, #5
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	440a      	add	r2, r1
 8004648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800464c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004650:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 8083 	beq.w	8004762 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	f003 030f 	and.w	r3, r3, #15
 800466c:	2101      	movs	r1, #1
 800466e:	fa01 f303 	lsl.w	r3, r1, r3
 8004672:	6979      	ldr	r1, [r7, #20]
 8004674:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004678:	4313      	orrs	r3, r2
 800467a:	634b      	str	r3, [r1, #52]	; 0x34
 800467c:	e071      	b.n	8004762 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	0151      	lsls	r1, r2, #5
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	440a      	add	r2, r1
 8004694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004698:	0cdb      	lsrs	r3, r3, #19
 800469a:	04db      	lsls	r3, r3, #19
 800469c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	0151      	lsls	r1, r2, #5
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	440a      	add	r2, r1
 80046b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	0151      	lsls	r1, r2, #5
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	440a      	add	r2, r1
 80046f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004706:	691a      	ldr	r2, [r3, #16]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004710:	6939      	ldr	r1, [r7, #16]
 8004712:	0148      	lsls	r0, r1, #5
 8004714:	6979      	ldr	r1, [r7, #20]
 8004716:	4401      	add	r1, r0
 8004718:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800471c:	4313      	orrs	r3, r2
 800471e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004720:	79fb      	ldrb	r3, [r7, #7]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d10d      	bne.n	8004742 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	6919      	ldr	r1, [r3, #16]
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473e:	460a      	mov	r2, r1
 8004740:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	0151      	lsls	r1, r2, #5
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	440a      	add	r2, r1
 8004758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800475c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004760:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	371c      	adds	r7, #28
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	785b      	ldrb	r3, [r3, #1]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d14a      	bne.n	8004824 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047a6:	f040 8086 	bne.w	80048b6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	7812      	ldrb	r2, [r2, #0]
 80047be:	0151      	lsls	r1, r2, #5
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	440a      	add	r2, r1
 80047c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	7812      	ldrb	r2, [r2, #0]
 80047e2:	0151      	lsls	r1, r2, #5
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	440a      	add	r2, r1
 80047e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3301      	adds	r3, #1
 80047f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80047fe:	4293      	cmp	r3, r2
 8004800:	d902      	bls.n	8004808 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	75fb      	strb	r3, [r7, #23]
          break;
 8004806:	e056      	b.n	80048b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4413      	add	r3, r2
 8004812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800481c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004820:	d0e7      	beq.n	80047f2 <USB_EPStopXfer+0x82>
 8004822:	e048      	b.n	80048b6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	4413      	add	r3, r2
 800482e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004838:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800483c:	d13b      	bne.n	80048b6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	7812      	ldrb	r2, [r2, #0]
 8004852:	0151      	lsls	r1, r2, #5
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	440a      	add	r2, r1
 8004858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800485c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004860:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	7812      	ldrb	r2, [r2, #0]
 8004876:	0151      	lsls	r1, r2, #5
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	440a      	add	r2, r1
 800487c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004880:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004884:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3301      	adds	r3, #1
 800488a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004892:	4293      	cmp	r3, r2
 8004894:	d902      	bls.n	800489c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	75fb      	strb	r3, [r7, #23]
          break;
 800489a:	e00c      	b.n	80048b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048b4:	d0e7      	beq.n	8004886 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80048b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	371c      	adds	r7, #28
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b089      	sub	sp, #36	; 0x24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	4611      	mov	r1, r2
 80048d0:	461a      	mov	r2, r3
 80048d2:	460b      	mov	r3, r1
 80048d4:	71fb      	strb	r3, [r7, #7]
 80048d6:	4613      	mov	r3, r2
 80048d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80048e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d123      	bne.n	8004932 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80048ea:	88bb      	ldrh	r3, [r7, #4]
 80048ec:	3303      	adds	r3, #3
 80048ee:	089b      	lsrs	r3, r3, #2
 80048f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80048f2:	2300      	movs	r3, #0
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	e018      	b.n	800492a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	031a      	lsls	r2, r3, #12
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004904:	461a      	mov	r2, r3
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	3301      	adds	r3, #1
 8004910:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	3301      	adds	r3, #1
 8004916:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	3301      	adds	r3, #1
 800491c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	3301      	adds	r3, #1
 8004922:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	3301      	adds	r3, #1
 8004928:	61bb      	str	r3, [r7, #24]
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	429a      	cmp	r2, r3
 8004930:	d3e2      	bcc.n	80048f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3724      	adds	r7, #36	; 0x24
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004940:	b480      	push	{r7}
 8004942:	b08b      	sub	sp, #44	; 0x2c
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	4613      	mov	r3, r2
 800494c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	089b      	lsrs	r3, r3, #2
 800495a:	b29b      	uxth	r3, r3
 800495c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800495e:	88fb      	ldrh	r3, [r7, #6]
 8004960:	f003 0303 	and.w	r3, r3, #3
 8004964:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004966:	2300      	movs	r3, #0
 8004968:	623b      	str	r3, [r7, #32]
 800496a:	e014      	b.n	8004996 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	601a      	str	r2, [r3, #0]
    pDest++;
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	3301      	adds	r3, #1
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	3301      	adds	r3, #1
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	3301      	adds	r3, #1
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	3301      	adds	r3, #1
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	3301      	adds	r3, #1
 8004994:	623b      	str	r3, [r7, #32]
 8004996:	6a3a      	ldr	r2, [r7, #32]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	429a      	cmp	r2, r3
 800499c:	d3e6      	bcc.n	800496c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800499e:	8bfb      	ldrh	r3, [r7, #30]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01e      	beq.n	80049e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ae:	461a      	mov	r2, r3
 80049b0:	f107 0310 	add.w	r3, r7, #16
 80049b4:	6812      	ldr	r2, [r2, #0]
 80049b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	fa22 f303 	lsr.w	r3, r2, r3
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	701a      	strb	r2, [r3, #0]
      i++;
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	3301      	adds	r3, #1
 80049ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	3301      	adds	r3, #1
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80049d6:	8bfb      	ldrh	r3, [r7, #30]
 80049d8:	3b01      	subs	r3, #1
 80049da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80049dc:	8bfb      	ldrh	r3, [r7, #30]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1ea      	bne.n	80049b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	372c      	adds	r7, #44	; 0x2c
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	785b      	ldrb	r3, [r3, #1]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d12c      	bne.n	8004a66 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	db12      	blt.n	8004a44 <USB_EPSetStall+0x54>
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00f      	beq.n	8004a44 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	0151      	lsls	r1, r2, #5
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	440a      	add	r2, r1
 8004a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a42:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	0151      	lsls	r1, r2, #5
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	440a      	add	r2, r1
 8004a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	e02b      	b.n	8004abe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	db12      	blt.n	8004a9e <USB_EPSetStall+0xae>
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00f      	beq.n	8004a9e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	0151      	lsls	r1, r2, #5
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	440a      	add	r2, r1
 8004a94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a9c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	0151      	lsls	r1, r2, #5
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	440a      	add	r2, r1
 8004ab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ab8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004abc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	785b      	ldrb	r3, [r3, #1]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d128      	bne.n	8004b3a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	0151      	lsls	r1, r2, #5
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	440a      	add	r2, r1
 8004afe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	791b      	ldrb	r3, [r3, #4]
 8004b0c:	2b03      	cmp	r3, #3
 8004b0e:	d003      	beq.n	8004b18 <USB_EPClearStall+0x4c>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	791b      	ldrb	r3, [r3, #4]
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d138      	bne.n	8004b8a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	0151      	lsls	r1, r2, #5
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	440a      	add	r2, r1
 8004b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	e027      	b.n	8004b8a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	0151      	lsls	r1, r2, #5
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	440a      	add	r2, r1
 8004b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	791b      	ldrb	r3, [r3, #4]
 8004b5e:	2b03      	cmp	r3, #3
 8004b60:	d003      	beq.n	8004b6a <USB_EPClearStall+0x9e>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	791b      	ldrb	r3, [r3, #4]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d10f      	bne.n	8004b8a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	0151      	lsls	r1, r2, #5
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	440a      	add	r2, r1
 8004b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b88:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bb6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004bba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	78fb      	ldrb	r3, [r7, #3]
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004bcc:	68f9      	ldr	r1, [r7, #12]
 8004bce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004bfe:	f023 0303 	bic.w	r3, r3, #3
 8004c02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c12:	f023 0302 	bic.w	r3, r3, #2
 8004c16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b085      	sub	sp, #20
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c40:	f023 0303 	bic.w	r3, r3, #3
 8004c44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c54:	f043 0302 	orr.w	r3, r3, #2
 8004c58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004c80:	68fb      	ldr	r3, [r7, #12]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b085      	sub	sp, #20
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	0c1b      	lsrs	r3, r3, #16
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b085      	sub	sp, #20
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	b29b      	uxth	r3, r3
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b085      	sub	sp, #20
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	460b      	mov	r3, r1
 8004d00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004d06:	78fb      	ldrb	r3, [r7, #3]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	4013      	ands	r3, r2
 8004d22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d24:	68bb      	ldr	r3, [r7, #8]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b087      	sub	sp, #28
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d54:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004d56:	78fb      	ldrb	r3, [r7, #3]
 8004d58:	f003 030f 	and.w	r3, r3, #15
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d62:	01db      	lsls	r3, r3, #7
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004d6c:	78fb      	ldrb	r3, [r7, #3]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d80:	68bb      	ldr	r3, [r7, #8]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	371c      	adds	r7, #28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b085      	sub	sp, #20
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004dc8:	f023 0307 	bic.w	r3, r3, #7
 8004dcc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	333c      	adds	r3, #60	; 0x3c
 8004e06:	3304      	adds	r3, #4
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	4a26      	ldr	r2, [pc, #152]	; (8004ea8 <USB_EP0_OutStart+0xb8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d90a      	bls.n	8004e2a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e24:	d101      	bne.n	8004e2a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	e037      	b.n	8004e9a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e30:	461a      	mov	r2, r3
 8004e32:	2300      	movs	r3, #0
 8004e34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e58:	f043 0318 	orr.w	r3, r3, #24
 8004e5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e6c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004e70:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004e72:	7afb      	ldrb	r3, [r7, #11]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d10f      	bne.n	8004e98 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7e:	461a      	mov	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e92:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004e96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	371c      	adds	r7, #28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	4f54300a 	.word	0x4f54300a

08004eac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4a13      	ldr	r2, [pc, #76]	; (8004f10 <USB_CoreReset+0x64>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d901      	bls.n	8004eca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e01b      	b.n	8004f02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	daf2      	bge.n	8004eb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f043 0201 	orr.w	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4a09      	ldr	r2, [pc, #36]	; (8004f10 <USB_CoreReset+0x64>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d901      	bls.n	8004ef4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e006      	b.n	8004f02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d0f0      	beq.n	8004ee2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	00030d40 	.word	0x00030d40

08004f14 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004f20:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004f24:	f002 fcaa 	bl	800787c <USBD_static_malloc>
 8004f28:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d109      	bne.n	8004f44 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	32b0      	adds	r2, #176	; 0xb0
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004f40:	2302      	movs	r3, #2
 8004f42:	e0d4      	b.n	80050ee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004f44:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004f48:	2100      	movs	r1, #0
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f002 fcfe 	bl	800794c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	32b0      	adds	r2, #176	; 0xb0
 8004f5a:	68f9      	ldr	r1, [r7, #12]
 8004f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	32b0      	adds	r2, #176	; 0xb0
 8004f6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	7c1b      	ldrb	r3, [r3, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d138      	bne.n	8004fee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004f7c:	4b5e      	ldr	r3, [pc, #376]	; (80050f8 <USBD_CDC_Init+0x1e4>)
 8004f7e:	7819      	ldrb	r1, [r3, #0]
 8004f80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f84:	2202      	movs	r2, #2
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f002 fb55 	bl	8007636 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004f8c:	4b5a      	ldr	r3, [pc, #360]	; (80050f8 <USBD_CDC_Init+0x1e4>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	f003 020f 	and.w	r2, r3, #15
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	4613      	mov	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	3324      	adds	r3, #36	; 0x24
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004fa6:	4b55      	ldr	r3, [pc, #340]	; (80050fc <USBD_CDC_Init+0x1e8>)
 8004fa8:	7819      	ldrb	r1, [r3, #0]
 8004faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fae:	2202      	movs	r2, #2
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f002 fb40 	bl	8007636 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004fb6:	4b51      	ldr	r3, [pc, #324]	; (80050fc <USBD_CDC_Init+0x1e8>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	f003 020f 	and.w	r2, r3, #15
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004fce:	2201      	movs	r2, #1
 8004fd0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004fd2:	4b4b      	ldr	r3, [pc, #300]	; (8005100 <USBD_CDC_Init+0x1ec>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	f003 020f 	and.w	r2, r3, #15
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	3326      	adds	r3, #38	; 0x26
 8004fe8:	2210      	movs	r2, #16
 8004fea:	801a      	strh	r2, [r3, #0]
 8004fec:	e035      	b.n	800505a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004fee:	4b42      	ldr	r3, [pc, #264]	; (80050f8 <USBD_CDC_Init+0x1e4>)
 8004ff0:	7819      	ldrb	r1, [r3, #0]
 8004ff2:	2340      	movs	r3, #64	; 0x40
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f002 fb1d 	bl	8007636 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004ffc:	4b3e      	ldr	r3, [pc, #248]	; (80050f8 <USBD_CDC_Init+0x1e4>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	f003 020f 	and.w	r2, r3, #15
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	4613      	mov	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	440b      	add	r3, r1
 8005010:	3324      	adds	r3, #36	; 0x24
 8005012:	2201      	movs	r2, #1
 8005014:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005016:	4b39      	ldr	r3, [pc, #228]	; (80050fc <USBD_CDC_Init+0x1e8>)
 8005018:	7819      	ldrb	r1, [r3, #0]
 800501a:	2340      	movs	r3, #64	; 0x40
 800501c:	2202      	movs	r2, #2
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f002 fb09 	bl	8007636 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005024:	4b35      	ldr	r3, [pc, #212]	; (80050fc <USBD_CDC_Init+0x1e8>)
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	f003 020f 	and.w	r2, r3, #15
 800502c:	6879      	ldr	r1, [r7, #4]
 800502e:	4613      	mov	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	440b      	add	r3, r1
 8005038:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800503c:	2201      	movs	r2, #1
 800503e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005040:	4b2f      	ldr	r3, [pc, #188]	; (8005100 <USBD_CDC_Init+0x1ec>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	f003 020f 	and.w	r2, r3, #15
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	4613      	mov	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	440b      	add	r3, r1
 8005054:	3326      	adds	r3, #38	; 0x26
 8005056:	2210      	movs	r2, #16
 8005058:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800505a:	4b29      	ldr	r3, [pc, #164]	; (8005100 <USBD_CDC_Init+0x1ec>)
 800505c:	7819      	ldrb	r1, [r3, #0]
 800505e:	2308      	movs	r3, #8
 8005060:	2203      	movs	r2, #3
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f002 fae7 	bl	8007636 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005068:	4b25      	ldr	r3, [pc, #148]	; (8005100 <USBD_CDC_Init+0x1ec>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	f003 020f 	and.w	r2, r3, #15
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	4613      	mov	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	3324      	adds	r3, #36	; 0x24
 800507e:	2201      	movs	r2, #1
 8005080:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	33b0      	adds	r3, #176	; 0xb0
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80050b8:	2302      	movs	r3, #2
 80050ba:	e018      	b.n	80050ee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	7c1b      	ldrb	r3, [r3, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10a      	bne.n	80050da <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80050c4:	4b0d      	ldr	r3, [pc, #52]	; (80050fc <USBD_CDC_Init+0x1e8>)
 80050c6:	7819      	ldrb	r1, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f002 fb9e 	bl	8007814 <USBD_LL_PrepareReceive>
 80050d8:	e008      	b.n	80050ec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80050da:	4b08      	ldr	r3, [pc, #32]	; (80050fc <USBD_CDC_Init+0x1e8>)
 80050dc:	7819      	ldrb	r1, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050e4:	2340      	movs	r3, #64	; 0x40
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f002 fb94 	bl	8007814 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20000093 	.word	0x20000093
 80050fc:	20000094 	.word	0x20000094
 8005100:	20000095 	.word	0x20000095

08005104 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005110:	4b3a      	ldr	r3, [pc, #232]	; (80051fc <USBD_CDC_DeInit+0xf8>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	4619      	mov	r1, r3
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f002 fab3 	bl	8007682 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800511c:	4b37      	ldr	r3, [pc, #220]	; (80051fc <USBD_CDC_DeInit+0xf8>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	f003 020f 	and.w	r2, r3, #15
 8005124:	6879      	ldr	r1, [r7, #4]
 8005126:	4613      	mov	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	440b      	add	r3, r1
 8005130:	3324      	adds	r3, #36	; 0x24
 8005132:	2200      	movs	r2, #0
 8005134:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005136:	4b32      	ldr	r3, [pc, #200]	; (8005200 <USBD_CDC_DeInit+0xfc>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	4619      	mov	r1, r3
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f002 faa0 	bl	8007682 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005142:	4b2f      	ldr	r3, [pc, #188]	; (8005200 <USBD_CDC_DeInit+0xfc>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	f003 020f 	and.w	r2, r3, #15
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	4613      	mov	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	440b      	add	r3, r1
 8005156:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800515a:	2200      	movs	r2, #0
 800515c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800515e:	4b29      	ldr	r3, [pc, #164]	; (8005204 <USBD_CDC_DeInit+0x100>)
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	4619      	mov	r1, r3
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f002 fa8c 	bl	8007682 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800516a:	4b26      	ldr	r3, [pc, #152]	; (8005204 <USBD_CDC_DeInit+0x100>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	f003 020f 	and.w	r2, r3, #15
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	4613      	mov	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	3324      	adds	r3, #36	; 0x24
 8005180:	2200      	movs	r2, #0
 8005182:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005184:	4b1f      	ldr	r3, [pc, #124]	; (8005204 <USBD_CDC_DeInit+0x100>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	f003 020f 	and.w	r2, r3, #15
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	440b      	add	r3, r1
 8005198:	3326      	adds	r3, #38	; 0x26
 800519a:	2200      	movs	r2, #0
 800519c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	32b0      	adds	r2, #176	; 0xb0
 80051a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01f      	beq.n	80051f0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	33b0      	adds	r3, #176	; 0xb0
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	32b0      	adds	r2, #176	; 0xb0
 80051ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f002 fb60 	bl	8007898 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	32b0      	adds	r2, #176	; 0xb0
 80051e2:	2100      	movs	r1, #0
 80051e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	20000093 	.word	0x20000093
 8005200:	20000094 	.word	0x20000094
 8005204:	20000095 	.word	0x20000095

08005208 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	32b0      	adds	r2, #176	; 0xb0
 800521c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005220:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005234:	2303      	movs	r3, #3
 8005236:	e0bf      	b.n	80053b8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005240:	2b00      	cmp	r3, #0
 8005242:	d050      	beq.n	80052e6 <USBD_CDC_Setup+0xde>
 8005244:	2b20      	cmp	r3, #32
 8005246:	f040 80af 	bne.w	80053a8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	88db      	ldrh	r3, [r3, #6]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d03a      	beq.n	80052c8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	b25b      	sxtb	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	da1b      	bge.n	8005294 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	33b0      	adds	r3, #176	; 0xb0
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005272:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	88d2      	ldrh	r2, [r2, #6]
 8005278:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	88db      	ldrh	r3, [r3, #6]
 800527e:	2b07      	cmp	r3, #7
 8005280:	bf28      	it	cs
 8005282:	2307      	movcs	r3, #7
 8005284:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	89fa      	ldrh	r2, [r7, #14]
 800528a:	4619      	mov	r1, r3
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f001 fd89 	bl	8006da4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005292:	e090      	b.n	80053b6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	785a      	ldrb	r2, [r3, #1]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	88db      	ldrh	r3, [r3, #6]
 80052a2:	2b3f      	cmp	r3, #63	; 0x3f
 80052a4:	d803      	bhi.n	80052ae <USBD_CDC_Setup+0xa6>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	88db      	ldrh	r3, [r3, #6]
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	e000      	b.n	80052b0 <USBD_CDC_Setup+0xa8>
 80052ae:	2240      	movs	r2, #64	; 0x40
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80052b6:	6939      	ldr	r1, [r7, #16]
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80052be:	461a      	mov	r2, r3
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f001 fd9b 	bl	8006dfc <USBD_CtlPrepareRx>
      break;
 80052c6:	e076      	b.n	80053b6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	33b0      	adds	r3, #176	; 0xb0
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	7850      	ldrb	r0, [r2, #1]
 80052de:	2200      	movs	r2, #0
 80052e0:	6839      	ldr	r1, [r7, #0]
 80052e2:	4798      	blx	r3
      break;
 80052e4:	e067      	b.n	80053b6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	785b      	ldrb	r3, [r3, #1]
 80052ea:	2b0b      	cmp	r3, #11
 80052ec:	d851      	bhi.n	8005392 <USBD_CDC_Setup+0x18a>
 80052ee:	a201      	add	r2, pc, #4	; (adr r2, 80052f4 <USBD_CDC_Setup+0xec>)
 80052f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f4:	08005325 	.word	0x08005325
 80052f8:	080053a1 	.word	0x080053a1
 80052fc:	08005393 	.word	0x08005393
 8005300:	08005393 	.word	0x08005393
 8005304:	08005393 	.word	0x08005393
 8005308:	08005393 	.word	0x08005393
 800530c:	08005393 	.word	0x08005393
 8005310:	08005393 	.word	0x08005393
 8005314:	08005393 	.word	0x08005393
 8005318:	08005393 	.word	0x08005393
 800531c:	0800534f 	.word	0x0800534f
 8005320:	08005379 	.word	0x08005379
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b03      	cmp	r3, #3
 800532e:	d107      	bne.n	8005340 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005330:	f107 030a 	add.w	r3, r7, #10
 8005334:	2202      	movs	r2, #2
 8005336:	4619      	mov	r1, r3
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f001 fd33 	bl	8006da4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800533e:	e032      	b.n	80053a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005340:	6839      	ldr	r1, [r7, #0]
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f001 fcbd 	bl	8006cc2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005348:	2303      	movs	r3, #3
 800534a:	75fb      	strb	r3, [r7, #23]
          break;
 800534c:	e02b      	b.n	80053a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b03      	cmp	r3, #3
 8005358:	d107      	bne.n	800536a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800535a:	f107 030d 	add.w	r3, r7, #13
 800535e:	2201      	movs	r2, #1
 8005360:	4619      	mov	r1, r3
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f001 fd1e 	bl	8006da4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005368:	e01d      	b.n	80053a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800536a:	6839      	ldr	r1, [r7, #0]
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f001 fca8 	bl	8006cc2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005372:	2303      	movs	r3, #3
 8005374:	75fb      	strb	r3, [r7, #23]
          break;
 8005376:	e016      	b.n	80053a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b03      	cmp	r3, #3
 8005382:	d00f      	beq.n	80053a4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005384:	6839      	ldr	r1, [r7, #0]
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f001 fc9b 	bl	8006cc2 <USBD_CtlError>
            ret = USBD_FAIL;
 800538c:	2303      	movs	r3, #3
 800538e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005390:	e008      	b.n	80053a4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005392:	6839      	ldr	r1, [r7, #0]
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f001 fc94 	bl	8006cc2 <USBD_CtlError>
          ret = USBD_FAIL;
 800539a:	2303      	movs	r3, #3
 800539c:	75fb      	strb	r3, [r7, #23]
          break;
 800539e:	e002      	b.n	80053a6 <USBD_CDC_Setup+0x19e>
          break;
 80053a0:	bf00      	nop
 80053a2:	e008      	b.n	80053b6 <USBD_CDC_Setup+0x1ae>
          break;
 80053a4:	bf00      	nop
      }
      break;
 80053a6:	e006      	b.n	80053b6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80053a8:	6839      	ldr	r1, [r7, #0]
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f001 fc89 	bl	8006cc2 <USBD_CtlError>
      ret = USBD_FAIL;
 80053b0:	2303      	movs	r3, #3
 80053b2:	75fb      	strb	r3, [r7, #23]
      break;
 80053b4:	bf00      	nop
  }

  return (uint8_t)ret;
 80053b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80053d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	32b0      	adds	r2, #176	; 0xb0
 80053de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e065      	b.n	80054b6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	32b0      	adds	r2, #176	; 0xb0
 80053f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80053fa:	78fb      	ldrb	r3, [r7, #3]
 80053fc:	f003 020f 	and.w	r2, r3, #15
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	4613      	mov	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	440b      	add	r3, r1
 800540c:	3318      	adds	r3, #24
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d02f      	beq.n	8005474 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005414:	78fb      	ldrb	r3, [r7, #3]
 8005416:	f003 020f 	and.w	r2, r3, #15
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	4613      	mov	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	440b      	add	r3, r1
 8005426:	3318      	adds	r3, #24
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	78fb      	ldrb	r3, [r7, #3]
 800542c:	f003 010f 	and.w	r1, r3, #15
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	460b      	mov	r3, r1
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	440b      	add	r3, r1
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4403      	add	r3, r0
 800543c:	3348      	adds	r3, #72	; 0x48
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	fbb2 f1f3 	udiv	r1, r2, r3
 8005444:	fb01 f303 	mul.w	r3, r1, r3
 8005448:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800544a:	2b00      	cmp	r3, #0
 800544c:	d112      	bne.n	8005474 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800544e:	78fb      	ldrb	r3, [r7, #3]
 8005450:	f003 020f 	and.w	r2, r3, #15
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	4613      	mov	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	440b      	add	r3, r1
 8005460:	3318      	adds	r3, #24
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005466:	78f9      	ldrb	r1, [r7, #3]
 8005468:	2300      	movs	r3, #0
 800546a:	2200      	movs	r2, #0
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f002 f9b0 	bl	80077d2 <USBD_LL_Transmit>
 8005472:	e01f      	b.n	80054b4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2200      	movs	r2, #0
 8005478:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	33b0      	adds	r3, #176	; 0xb0
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d010      	beq.n	80054b4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	33b0      	adds	r3, #176	; 0xb0
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80054b0:	78fa      	ldrb	r2, [r7, #3]
 80054b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	460b      	mov	r3, r1
 80054c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	32b0      	adds	r2, #176	; 0xb0
 80054d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	32b0      	adds	r2, #176	; 0xb0
 80054e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e01a      	b.n	8005526 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80054f0:	78fb      	ldrb	r3, [r7, #3]
 80054f2:	4619      	mov	r1, r3
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f002 f9ae 	bl	8007856 <USBD_LL_GetRxDataSize>
 80054fa:	4602      	mov	r2, r0
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	33b0      	adds	r3, #176	; 0xb0
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005520:	4611      	mov	r1, r2
 8005522:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b084      	sub	sp, #16
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	32b0      	adds	r2, #176	; 0xb0
 8005540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005544:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800554c:	2303      	movs	r3, #3
 800554e:	e025      	b.n	800559c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	33b0      	adds	r3, #176	; 0xb0
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d01a      	beq.n	800559a <USBD_CDC_EP0_RxReady+0x6c>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800556a:	2bff      	cmp	r3, #255	; 0xff
 800556c:	d015      	beq.n	800559a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	33b0      	adds	r3, #176	; 0xb0
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005586:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800558e:	b292      	uxth	r2, r2
 8005590:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	22ff      	movs	r2, #255	; 0xff
 8005596:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80055ac:	2182      	movs	r1, #130	; 0x82
 80055ae:	4818      	ldr	r0, [pc, #96]	; (8005610 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80055b0:	f000 fd4f 	bl	8006052 <USBD_GetEpDesc>
 80055b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80055b6:	2101      	movs	r1, #1
 80055b8:	4815      	ldr	r0, [pc, #84]	; (8005610 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80055ba:	f000 fd4a 	bl	8006052 <USBD_GetEpDesc>
 80055be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80055c0:	2181      	movs	r1, #129	; 0x81
 80055c2:	4813      	ldr	r0, [pc, #76]	; (8005610 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80055c4:	f000 fd45 	bl	8006052 <USBD_GetEpDesc>
 80055c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	2210      	movs	r2, #16
 80055d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d006      	beq.n	80055ea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	2200      	movs	r2, #0
 80055e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055e4:	711a      	strb	r2, [r3, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d006      	beq.n	80055fe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055f8:	711a      	strb	r2, [r3, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2243      	movs	r2, #67	; 0x43
 8005602:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005604:	4b02      	ldr	r3, [pc, #8]	; (8005610 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005606:	4618      	mov	r0, r3
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	20000050 	.word	0x20000050

08005614 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800561c:	2182      	movs	r1, #130	; 0x82
 800561e:	4818      	ldr	r0, [pc, #96]	; (8005680 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005620:	f000 fd17 	bl	8006052 <USBD_GetEpDesc>
 8005624:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005626:	2101      	movs	r1, #1
 8005628:	4815      	ldr	r0, [pc, #84]	; (8005680 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800562a:	f000 fd12 	bl	8006052 <USBD_GetEpDesc>
 800562e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005630:	2181      	movs	r1, #129	; 0x81
 8005632:	4813      	ldr	r0, [pc, #76]	; (8005680 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005634:	f000 fd0d 	bl	8006052 <USBD_GetEpDesc>
 8005638:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	2210      	movs	r2, #16
 8005644:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d006      	beq.n	800565a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	2200      	movs	r2, #0
 8005650:	711a      	strb	r2, [r3, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f042 0202 	orr.w	r2, r2, #2
 8005658:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d006      	beq.n	800566e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	711a      	strb	r2, [r3, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f042 0202 	orr.w	r2, r2, #2
 800566c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2243      	movs	r2, #67	; 0x43
 8005672:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005674:	4b02      	ldr	r3, [pc, #8]	; (8005680 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20000050 	.word	0x20000050

08005684 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800568c:	2182      	movs	r1, #130	; 0x82
 800568e:	4818      	ldr	r0, [pc, #96]	; (80056f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005690:	f000 fcdf 	bl	8006052 <USBD_GetEpDesc>
 8005694:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005696:	2101      	movs	r1, #1
 8005698:	4815      	ldr	r0, [pc, #84]	; (80056f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800569a:	f000 fcda 	bl	8006052 <USBD_GetEpDesc>
 800569e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80056a0:	2181      	movs	r1, #129	; 0x81
 80056a2:	4813      	ldr	r0, [pc, #76]	; (80056f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80056a4:	f000 fcd5 	bl	8006052 <USBD_GetEpDesc>
 80056a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	2210      	movs	r2, #16
 80056b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d006      	beq.n	80056ca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	2200      	movs	r2, #0
 80056c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056c4:	711a      	strb	r2, [r3, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d006      	beq.n	80056de <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056d8:	711a      	strb	r2, [r3, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2243      	movs	r2, #67	; 0x43
 80056e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80056e4:	4b02      	ldr	r3, [pc, #8]	; (80056f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20000050 	.word	0x20000050

080056f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	220a      	movs	r2, #10
 8005700:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005702:	4b03      	ldr	r3, [pc, #12]	; (8005710 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005704:	4618      	mov	r0, r3
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	2000000c 	.word	0x2000000c

08005714 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005724:	2303      	movs	r3, #3
 8005726:	e009      	b.n	800573c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	33b0      	adds	r3, #176	; 0xb0
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	32b0      	adds	r2, #176	; 0xb0
 800575e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005762:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800576a:	2303      	movs	r3, #3
 800576c:	e008      	b.n	8005780 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	371c      	adds	r7, #28
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	32b0      	adds	r2, #176	; 0xb0
 80057a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e004      	b.n	80057ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
	...

080057c8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	32b0      	adds	r2, #176	; 0xb0
 80057da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057de:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80057e0:	2301      	movs	r3, #1
 80057e2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	32b0      	adds	r2, #176	; 0xb0
 80057ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e025      	b.n	8005846 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005800:	2b00      	cmp	r3, #0
 8005802:	d11f      	bne.n	8005844 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2201      	movs	r2, #1
 8005808:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800580c:	4b10      	ldr	r3, [pc, #64]	; (8005850 <USBD_CDC_TransmitPacket+0x88>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	f003 020f 	and.w	r2, r3, #15
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	4613      	mov	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4403      	add	r3, r0
 8005826:	3318      	adds	r3, #24
 8005828:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800582a:	4b09      	ldr	r3, [pc, #36]	; (8005850 <USBD_CDC_TransmitPacket+0x88>)
 800582c:	7819      	ldrb	r1, [r3, #0]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f001 ffc9 	bl	80077d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005844:	7bfb      	ldrb	r3, [r7, #15]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20000093 	.word	0x20000093

08005854 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	32b0      	adds	r2, #176	; 0xb0
 8005866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800586a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	32b0      	adds	r2, #176	; 0xb0
 8005876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800587e:	2303      	movs	r3, #3
 8005880:	e018      	b.n	80058b4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	7c1b      	ldrb	r3, [r3, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10a      	bne.n	80058a0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800588a:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <USBD_CDC_ReceivePacket+0x68>)
 800588c:	7819      	ldrb	r1, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005894:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f001 ffbb 	bl	8007814 <USBD_LL_PrepareReceive>
 800589e:	e008      	b.n	80058b2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80058a0:	4b06      	ldr	r3, [pc, #24]	; (80058bc <USBD_CDC_ReceivePacket+0x68>)
 80058a2:	7819      	ldrb	r1, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058aa:	2340      	movs	r3, #64	; 0x40
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f001 ffb1 	bl	8007814 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	20000094 	.word	0x20000094

080058c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	4613      	mov	r3, r2
 80058cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e01f      	b.n	8005918 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	79fa      	ldrb	r2, [r7, #7]
 800590a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f001 fe2b 	bl	8007568 <USBD_LL_Init>
 8005912:	4603      	mov	r3, r0
 8005914:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005916:	7dfb      	ldrb	r3, [r7, #23]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3718      	adds	r7, #24
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800592a:	2300      	movs	r3, #0
 800592c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005934:	2303      	movs	r3, #3
 8005936:	e025      	b.n	8005984 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	32ae      	adds	r2, #174	; 0xae
 800594a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00f      	beq.n	8005974 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	32ae      	adds	r2, #174	; 0xae
 800595e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	f107 020e 	add.w	r2, r7, #14
 8005968:	4610      	mov	r0, r2
 800596a:	4798      	blx	r3
 800596c:	4602      	mov	r2, r0
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f001 fe33 	bl	8007600 <USBD_LL_Start>
 800599a:	4603      	mov	r3, r0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80059ac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b084      	sub	sp, #16
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	460b      	mov	r3, r1
 80059c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d009      	beq.n	80059e8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	78fa      	ldrb	r2, [r7, #3]
 80059de:	4611      	mov	r1, r2
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	4798      	blx	r3
 80059e4:	4603      	mov	r3, r0
 80059e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b084      	sub	sp, #16
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	460b      	mov	r3, r1
 80059fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	78fa      	ldrb	r2, [r7, #3]
 8005a0c:	4611      	mov	r1, r2
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	4798      	blx	r3
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d001      	beq.n	8005a1c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b084      	sub	sp, #16
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
 8005a2e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a36:	6839      	ldr	r1, [r7, #0]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f001 f908 	bl	8006c4e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a5a:	f003 031f 	and.w	r3, r3, #31
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d01a      	beq.n	8005a98 <USBD_LL_SetupStage+0x72>
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d822      	bhi.n	8005aac <USBD_LL_SetupStage+0x86>
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <USBD_LL_SetupStage+0x4a>
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d00a      	beq.n	8005a84 <USBD_LL_SetupStage+0x5e>
 8005a6e:	e01d      	b.n	8005aac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a76:	4619      	mov	r1, r3
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fb5f 	bl	800613c <USBD_StdDevReq>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	73fb      	strb	r3, [r7, #15]
      break;
 8005a82:	e020      	b.n	8005ac6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 fbc7 	bl	8006220 <USBD_StdItfReq>
 8005a92:	4603      	mov	r3, r0
 8005a94:	73fb      	strb	r3, [r7, #15]
      break;
 8005a96:	e016      	b.n	8005ac6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fc29 	bl	80062f8 <USBD_StdEPReq>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8005aaa:	e00c      	b.n	8005ac6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ab2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	4619      	mov	r1, r3
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f001 fe00 	bl	80076c0 <USBD_LL_StallEP>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac4:	bf00      	nop
  }

  return ret;
 8005ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005ae2:	7afb      	ldrb	r3, [r7, #11]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d16e      	bne.n	8005bc6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005aee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005af6:	2b03      	cmp	r3, #3
 8005af8:	f040 8098 	bne.w	8005c2c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d913      	bls.n	8005b30 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	1ad2      	subs	r2, r2, r3
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	bf28      	it	cs
 8005b22:	4613      	movcs	r3, r2
 8005b24:	461a      	mov	r2, r3
 8005b26:	6879      	ldr	r1, [r7, #4]
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f001 f984 	bl	8006e36 <USBD_CtlContinueRx>
 8005b2e:	e07d      	b.n	8005c2c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005b36:	f003 031f 	and.w	r3, r3, #31
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d014      	beq.n	8005b68 <USBD_LL_DataOutStage+0x98>
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d81d      	bhi.n	8005b7e <USBD_LL_DataOutStage+0xae>
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <USBD_LL_DataOutStage+0x7c>
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d003      	beq.n	8005b52 <USBD_LL_DataOutStage+0x82>
 8005b4a:	e018      	b.n	8005b7e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	75bb      	strb	r3, [r7, #22]
            break;
 8005b50:	e018      	b.n	8005b84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 fa5e 	bl	800601e <USBD_CoreFindIF>
 8005b62:	4603      	mov	r3, r0
 8005b64:	75bb      	strb	r3, [r7, #22]
            break;
 8005b66:	e00d      	b.n	8005b84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	4619      	mov	r1, r3
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 fa60 	bl	8006038 <USBD_CoreFindEP>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	75bb      	strb	r3, [r7, #22]
            break;
 8005b7c:	e002      	b.n	8005b84 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	75bb      	strb	r3, [r7, #22]
            break;
 8005b82:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005b84:	7dbb      	ldrb	r3, [r7, #22]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d119      	bne.n	8005bbe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b03      	cmp	r3, #3
 8005b94:	d113      	bne.n	8005bbe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005b96:	7dba      	ldrb	r2, [r7, #22]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	32ae      	adds	r2, #174	; 0xae
 8005b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00b      	beq.n	8005bbe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005ba6:	7dba      	ldrb	r2, [r7, #22]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005bae:	7dba      	ldrb	r2, [r7, #22]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	32ae      	adds	r2, #174	; 0xae
 8005bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f001 f94a 	bl	8006e58 <USBD_CtlSendStatus>
 8005bc4:	e032      	b.n	8005c2c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005bc6:	7afb      	ldrb	r3, [r7, #11]
 8005bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	4619      	mov	r1, r3
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 fa31 	bl	8006038 <USBD_CoreFindEP>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005bda:	7dbb      	ldrb	r3, [r7, #22]
 8005bdc:	2bff      	cmp	r3, #255	; 0xff
 8005bde:	d025      	beq.n	8005c2c <USBD_LL_DataOutStage+0x15c>
 8005be0:	7dbb      	ldrb	r3, [r7, #22]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d122      	bne.n	8005c2c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d117      	bne.n	8005c22 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005bf2:	7dba      	ldrb	r2, [r7, #22]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	32ae      	adds	r2, #174	; 0xae
 8005bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00f      	beq.n	8005c22 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005c02:	7dba      	ldrb	r2, [r7, #22]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005c0a:	7dba      	ldrb	r2, [r7, #22]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	32ae      	adds	r2, #174	; 0xae
 8005c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	7afa      	ldrb	r2, [r7, #11]
 8005c18:	4611      	mov	r1, r2
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	4798      	blx	r3
 8005c1e:	4603      	mov	r3, r0
 8005c20:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005c22:	7dfb      	ldrb	r3, [r7, #23]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
 8005c2a:	e000      	b.n	8005c2e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b086      	sub	sp, #24
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	460b      	mov	r3, r1
 8005c40:	607a      	str	r2, [r7, #4]
 8005c42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005c44:	7afb      	ldrb	r3, [r7, #11]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d16f      	bne.n	8005d2a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3314      	adds	r3, #20
 8005c4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d15a      	bne.n	8005d10 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	689a      	ldr	r2, [r3, #8]
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d914      	bls.n	8005c90 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	689a      	ldr	r2, [r3, #8]
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	1ad2      	subs	r2, r2, r3
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f001 f8ac 	bl	8006dda <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c82:	2300      	movs	r3, #0
 8005c84:	2200      	movs	r2, #0
 8005c86:	2100      	movs	r1, #0
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f001 fdc3 	bl	8007814 <USBD_LL_PrepareReceive>
 8005c8e:	e03f      	b.n	8005d10 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	68da      	ldr	r2, [r3, #12]
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d11c      	bne.n	8005cd6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d316      	bcc.n	8005cd6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d20f      	bcs.n	8005cd6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2100      	movs	r1, #0
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f001 f88d 	bl	8006dda <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cc8:	2300      	movs	r3, #0
 8005cca:	2200      	movs	r2, #0
 8005ccc:	2100      	movs	r1, #0
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f001 fda0 	bl	8007814 <USBD_LL_PrepareReceive>
 8005cd4:	e01c      	b.n	8005d10 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b03      	cmp	r3, #3
 8005ce0:	d10f      	bne.n	8005d02 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d009      	beq.n	8005d02 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d02:	2180      	movs	r1, #128	; 0x80
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f001 fcdb 	bl	80076c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f001 f8b7 	bl	8006e7e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d03a      	beq.n	8005d90 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f7ff fe42 	bl	80059a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005d28:	e032      	b.n	8005d90 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005d2a:	7afb      	ldrb	r3, [r7, #11]
 8005d2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	4619      	mov	r1, r3
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 f97f 	bl	8006038 <USBD_CoreFindEP>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d3e:	7dfb      	ldrb	r3, [r7, #23]
 8005d40:	2bff      	cmp	r3, #255	; 0xff
 8005d42:	d025      	beq.n	8005d90 <USBD_LL_DataInStage+0x15a>
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d122      	bne.n	8005d90 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d11c      	bne.n	8005d90 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005d56:	7dfa      	ldrb	r2, [r7, #23]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	32ae      	adds	r2, #174	; 0xae
 8005d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d014      	beq.n	8005d90 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005d66:	7dfa      	ldrb	r2, [r7, #23]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005d6e:	7dfa      	ldrb	r2, [r7, #23]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	32ae      	adds	r2, #174	; 0xae
 8005d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	7afa      	ldrb	r2, [r7, #11]
 8005d7c:	4611      	mov	r1, r2
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	4798      	blx	r3
 8005d82:	4603      	mov	r3, r0
 8005d84:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005d86:	7dbb      	ldrb	r3, [r7, #22]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005d8c:	7dbb      	ldrb	r3, [r7, #22]
 8005d8e:	e000      	b.n	8005d92 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3718      	adds	r7, #24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d014      	beq.n	8005e00 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00e      	beq.n	8005e00 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	6852      	ldr	r2, [r2, #4]
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	4611      	mov	r1, r2
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	4798      	blx	r3
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e00:	2340      	movs	r3, #64	; 0x40
 8005e02:	2200      	movs	r2, #0
 8005e04:	2100      	movs	r1, #0
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f001 fc15 	bl	8007636 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2240      	movs	r2, #64	; 0x40
 8005e18:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e1c:	2340      	movs	r3, #64	; 0x40
 8005e1e:	2200      	movs	r2, #0
 8005e20:	2180      	movs	r1, #128	; 0x80
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f001 fc07 	bl	8007636 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2240      	movs	r2, #64	; 0x40
 8005e32:	621a      	str	r2, [r3, #32]

  return ret;
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	460b      	mov	r3, r1
 8005e48:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	78fa      	ldrb	r2, [r7, #3]
 8005e4e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2204      	movs	r2, #4
 8005e78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d106      	bne.n	8005eac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b082      	sub	sp, #8
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d110      	bne.n	8005ef0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00b      	beq.n	8005ef0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d005      	beq.n	8005ef0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b082      	sub	sp, #8
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	460b      	mov	r3, r1
 8005f04:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	32ae      	adds	r2, #174	; 0xae
 8005f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d101      	bne.n	8005f1c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e01c      	b.n	8005f56 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b03      	cmp	r3, #3
 8005f26:	d115      	bne.n	8005f54 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	32ae      	adds	r2, #174	; 0xae
 8005f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00b      	beq.n	8005f54 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	32ae      	adds	r2, #174	; 0xae
 8005f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	78fa      	ldrb	r2, [r7, #3]
 8005f4e:	4611      	mov	r1, r2
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b082      	sub	sp, #8
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	460b      	mov	r3, r1
 8005f68:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	32ae      	adds	r2, #174	; 0xae
 8005f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e01c      	b.n	8005fba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b03      	cmp	r3, #3
 8005f8a:	d115      	bne.n	8005fb8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	32ae      	adds	r2, #174	; 0xae
 8005f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00b      	beq.n	8005fb8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	32ae      	adds	r2, #174	; 0xae
 8005faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	78fa      	ldrb	r2, [r7, #3]
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00e      	beq.n	8006014 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6852      	ldr	r2, [r2, #4]
 8006002:	b2d2      	uxtb	r2, r2
 8006004:	4611      	mov	r1, r2
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	4798      	blx	r3
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006010:	2303      	movs	r3, #3
 8006012:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006014:	7bfb      	ldrb	r3, [r7, #15]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800601e:	b480      	push	{r7}
 8006020:	b083      	sub	sp, #12
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	460b      	mov	r3, r1
 8006028:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800602a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800602c:	4618      	mov	r0, r3
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006044:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006046:	4618      	mov	r0, r3
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b086      	sub	sp, #24
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	460b      	mov	r3, r1
 800605c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006066:	2300      	movs	r3, #0
 8006068:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	885b      	ldrh	r3, [r3, #2]
 800606e:	b29a      	uxth	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	b29b      	uxth	r3, r3
 8006076:	429a      	cmp	r2, r3
 8006078:	d920      	bls.n	80060bc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	b29b      	uxth	r3, r3
 8006080:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006082:	e013      	b.n	80060ac <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006084:	f107 030a 	add.w	r3, r7, #10
 8006088:	4619      	mov	r1, r3
 800608a:	6978      	ldr	r0, [r7, #20]
 800608c:	f000 f81b 	bl	80060c6 <USBD_GetNextDesc>
 8006090:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	785b      	ldrb	r3, [r3, #1]
 8006096:	2b05      	cmp	r3, #5
 8006098:	d108      	bne.n	80060ac <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	789b      	ldrb	r3, [r3, #2]
 80060a2:	78fa      	ldrb	r2, [r7, #3]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d008      	beq.n	80060ba <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80060a8:	2300      	movs	r3, #0
 80060aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	885b      	ldrh	r3, [r3, #2]
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	897b      	ldrh	r3, [r7, #10]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d8e5      	bhi.n	8006084 <USBD_GetEpDesc+0x32>
 80060b8:	e000      	b.n	80060bc <USBD_GetEpDesc+0x6a>
          break;
 80060ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80060bc:	693b      	ldr	r3, [r7, #16]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b085      	sub	sp, #20
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	881a      	ldrh	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	b29b      	uxth	r3, r3
 80060de:	4413      	add	r3, r2
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	461a      	mov	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4413      	add	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80060f2:	68fb      	ldr	r3, [r7, #12]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	3301      	adds	r3, #1
 8006116:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800611e:	8a3b      	ldrh	r3, [r7, #16]
 8006120:	021b      	lsls	r3, r3, #8
 8006122:	b21a      	sxth	r2, r3
 8006124:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006128:	4313      	orrs	r3, r2
 800612a:	b21b      	sxth	r3, r3
 800612c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800612e:	89fb      	ldrh	r3, [r7, #14]
}
 8006130:	4618      	mov	r0, r3
 8006132:	371c      	adds	r7, #28
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006152:	2b40      	cmp	r3, #64	; 0x40
 8006154:	d005      	beq.n	8006162 <USBD_StdDevReq+0x26>
 8006156:	2b40      	cmp	r3, #64	; 0x40
 8006158:	d857      	bhi.n	800620a <USBD_StdDevReq+0xce>
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00f      	beq.n	800617e <USBD_StdDevReq+0x42>
 800615e:	2b20      	cmp	r3, #32
 8006160:	d153      	bne.n	800620a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	32ae      	adds	r2, #174	; 0xae
 800616c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	4798      	blx	r3
 8006178:	4603      	mov	r3, r0
 800617a:	73fb      	strb	r3, [r7, #15]
      break;
 800617c:	e04a      	b.n	8006214 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	785b      	ldrb	r3, [r3, #1]
 8006182:	2b09      	cmp	r3, #9
 8006184:	d83b      	bhi.n	80061fe <USBD_StdDevReq+0xc2>
 8006186:	a201      	add	r2, pc, #4	; (adr r2, 800618c <USBD_StdDevReq+0x50>)
 8006188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618c:	080061e1 	.word	0x080061e1
 8006190:	080061f5 	.word	0x080061f5
 8006194:	080061ff 	.word	0x080061ff
 8006198:	080061eb 	.word	0x080061eb
 800619c:	080061ff 	.word	0x080061ff
 80061a0:	080061bf 	.word	0x080061bf
 80061a4:	080061b5 	.word	0x080061b5
 80061a8:	080061ff 	.word	0x080061ff
 80061ac:	080061d7 	.word	0x080061d7
 80061b0:	080061c9 	.word	0x080061c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80061b4:	6839      	ldr	r1, [r7, #0]
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fa3c 	bl	8006634 <USBD_GetDescriptor>
          break;
 80061bc:	e024      	b.n	8006208 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80061be:	6839      	ldr	r1, [r7, #0]
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fba1 	bl	8006908 <USBD_SetAddress>
          break;
 80061c6:	e01f      	b.n	8006208 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80061c8:	6839      	ldr	r1, [r7, #0]
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fbe0 	bl	8006990 <USBD_SetConfig>
 80061d0:	4603      	mov	r3, r0
 80061d2:	73fb      	strb	r3, [r7, #15]
          break;
 80061d4:	e018      	b.n	8006208 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80061d6:	6839      	ldr	r1, [r7, #0]
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fc83 	bl	8006ae4 <USBD_GetConfig>
          break;
 80061de:	e013      	b.n	8006208 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80061e0:	6839      	ldr	r1, [r7, #0]
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fcb4 	bl	8006b50 <USBD_GetStatus>
          break;
 80061e8:	e00e      	b.n	8006208 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80061ea:	6839      	ldr	r1, [r7, #0]
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 fce3 	bl	8006bb8 <USBD_SetFeature>
          break;
 80061f2:	e009      	b.n	8006208 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80061f4:	6839      	ldr	r1, [r7, #0]
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fd07 	bl	8006c0a <USBD_ClrFeature>
          break;
 80061fc:	e004      	b.n	8006208 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80061fe:	6839      	ldr	r1, [r7, #0]
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fd5e 	bl	8006cc2 <USBD_CtlError>
          break;
 8006206:	bf00      	nop
      }
      break;
 8006208:	e004      	b.n	8006214 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800620a:	6839      	ldr	r1, [r7, #0]
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fd58 	bl	8006cc2 <USBD_CtlError>
      break;
 8006212:	bf00      	nop
  }

  return ret;
 8006214:	7bfb      	ldrb	r3, [r7, #15]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop

08006220 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006236:	2b40      	cmp	r3, #64	; 0x40
 8006238:	d005      	beq.n	8006246 <USBD_StdItfReq+0x26>
 800623a:	2b40      	cmp	r3, #64	; 0x40
 800623c:	d852      	bhi.n	80062e4 <USBD_StdItfReq+0xc4>
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <USBD_StdItfReq+0x26>
 8006242:	2b20      	cmp	r3, #32
 8006244:	d14e      	bne.n	80062e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800624c:	b2db      	uxtb	r3, r3
 800624e:	3b01      	subs	r3, #1
 8006250:	2b02      	cmp	r3, #2
 8006252:	d840      	bhi.n	80062d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	889b      	ldrh	r3, [r3, #4]
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b01      	cmp	r3, #1
 800625c:	d836      	bhi.n	80062cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	889b      	ldrh	r3, [r3, #4]
 8006262:	b2db      	uxtb	r3, r3
 8006264:	4619      	mov	r1, r3
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7ff fed9 	bl	800601e <USBD_CoreFindIF>
 800626c:	4603      	mov	r3, r0
 800626e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006270:	7bbb      	ldrb	r3, [r7, #14]
 8006272:	2bff      	cmp	r3, #255	; 0xff
 8006274:	d01d      	beq.n	80062b2 <USBD_StdItfReq+0x92>
 8006276:	7bbb      	ldrb	r3, [r7, #14]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d11a      	bne.n	80062b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800627c:	7bba      	ldrb	r2, [r7, #14]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	32ae      	adds	r2, #174	; 0xae
 8006282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00f      	beq.n	80062ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800628c:	7bba      	ldrb	r2, [r7, #14]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006294:	7bba      	ldrb	r2, [r7, #14]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	32ae      	adds	r2, #174	; 0xae
 800629a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	6839      	ldr	r1, [r7, #0]
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	4798      	blx	r3
 80062a6:	4603      	mov	r3, r0
 80062a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80062aa:	e004      	b.n	80062b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80062ac:	2303      	movs	r3, #3
 80062ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80062b0:	e001      	b.n	80062b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80062b2:	2303      	movs	r3, #3
 80062b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	88db      	ldrh	r3, [r3, #6]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d110      	bne.n	80062e0 <USBD_StdItfReq+0xc0>
 80062be:	7bfb      	ldrb	r3, [r7, #15]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10d      	bne.n	80062e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fdc7 	bl	8006e58 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80062ca:	e009      	b.n	80062e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80062cc:	6839      	ldr	r1, [r7, #0]
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fcf7 	bl	8006cc2 <USBD_CtlError>
          break;
 80062d4:	e004      	b.n	80062e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80062d6:	6839      	ldr	r1, [r7, #0]
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fcf2 	bl	8006cc2 <USBD_CtlError>
          break;
 80062de:	e000      	b.n	80062e2 <USBD_StdItfReq+0xc2>
          break;
 80062e0:	bf00      	nop
      }
      break;
 80062e2:	e004      	b.n	80062ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80062e4:	6839      	ldr	r1, [r7, #0]
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fceb 	bl	8006cc2 <USBD_CtlError>
      break;
 80062ec:	bf00      	nop
  }

  return ret;
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006302:	2300      	movs	r3, #0
 8006304:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	889b      	ldrh	r3, [r3, #4]
 800630a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006314:	2b40      	cmp	r3, #64	; 0x40
 8006316:	d007      	beq.n	8006328 <USBD_StdEPReq+0x30>
 8006318:	2b40      	cmp	r3, #64	; 0x40
 800631a:	f200 817f 	bhi.w	800661c <USBD_StdEPReq+0x324>
 800631e:	2b00      	cmp	r3, #0
 8006320:	d02a      	beq.n	8006378 <USBD_StdEPReq+0x80>
 8006322:	2b20      	cmp	r3, #32
 8006324:	f040 817a 	bne.w	800661c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7ff fe83 	bl	8006038 <USBD_CoreFindEP>
 8006332:	4603      	mov	r3, r0
 8006334:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006336:	7b7b      	ldrb	r3, [r7, #13]
 8006338:	2bff      	cmp	r3, #255	; 0xff
 800633a:	f000 8174 	beq.w	8006626 <USBD_StdEPReq+0x32e>
 800633e:	7b7b      	ldrb	r3, [r7, #13]
 8006340:	2b00      	cmp	r3, #0
 8006342:	f040 8170 	bne.w	8006626 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006346:	7b7a      	ldrb	r2, [r7, #13]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800634e:	7b7a      	ldrb	r2, [r7, #13]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	32ae      	adds	r2, #174	; 0xae
 8006354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 8163 	beq.w	8006626 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006360:	7b7a      	ldrb	r2, [r7, #13]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	32ae      	adds	r2, #174	; 0xae
 8006366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	4798      	blx	r3
 8006372:	4603      	mov	r3, r0
 8006374:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006376:	e156      	b.n	8006626 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	785b      	ldrb	r3, [r3, #1]
 800637c:	2b03      	cmp	r3, #3
 800637e:	d008      	beq.n	8006392 <USBD_StdEPReq+0x9a>
 8006380:	2b03      	cmp	r3, #3
 8006382:	f300 8145 	bgt.w	8006610 <USBD_StdEPReq+0x318>
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 809b 	beq.w	80064c2 <USBD_StdEPReq+0x1ca>
 800638c:	2b01      	cmp	r3, #1
 800638e:	d03c      	beq.n	800640a <USBD_StdEPReq+0x112>
 8006390:	e13e      	b.n	8006610 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d002      	beq.n	80063a4 <USBD_StdEPReq+0xac>
 800639e:	2b03      	cmp	r3, #3
 80063a0:	d016      	beq.n	80063d0 <USBD_StdEPReq+0xd8>
 80063a2:	e02c      	b.n	80063fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063a4:	7bbb      	ldrb	r3, [r7, #14]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00d      	beq.n	80063c6 <USBD_StdEPReq+0xce>
 80063aa:	7bbb      	ldrb	r3, [r7, #14]
 80063ac:	2b80      	cmp	r3, #128	; 0x80
 80063ae:	d00a      	beq.n	80063c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80063b0:	7bbb      	ldrb	r3, [r7, #14]
 80063b2:	4619      	mov	r1, r3
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f001 f983 	bl	80076c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80063ba:	2180      	movs	r1, #128	; 0x80
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f001 f97f 	bl	80076c0 <USBD_LL_StallEP>
 80063c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063c4:	e020      	b.n	8006408 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80063c6:	6839      	ldr	r1, [r7, #0]
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fc7a 	bl	8006cc2 <USBD_CtlError>
              break;
 80063ce:	e01b      	b.n	8006408 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	885b      	ldrh	r3, [r3, #2]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10e      	bne.n	80063f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80063d8:	7bbb      	ldrb	r3, [r7, #14]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00b      	beq.n	80063f6 <USBD_StdEPReq+0xfe>
 80063de:	7bbb      	ldrb	r3, [r7, #14]
 80063e0:	2b80      	cmp	r3, #128	; 0x80
 80063e2:	d008      	beq.n	80063f6 <USBD_StdEPReq+0xfe>
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	88db      	ldrh	r3, [r3, #6]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d104      	bne.n	80063f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80063ec:	7bbb      	ldrb	r3, [r7, #14]
 80063ee:	4619      	mov	r1, r3
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f001 f965 	bl	80076c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fd2e 	bl	8006e58 <USBD_CtlSendStatus>

              break;
 80063fc:	e004      	b.n	8006408 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fc5e 	bl	8006cc2 <USBD_CtlError>
              break;
 8006406:	bf00      	nop
          }
          break;
 8006408:	e107      	b.n	800661a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b02      	cmp	r3, #2
 8006414:	d002      	beq.n	800641c <USBD_StdEPReq+0x124>
 8006416:	2b03      	cmp	r3, #3
 8006418:	d016      	beq.n	8006448 <USBD_StdEPReq+0x150>
 800641a:	e04b      	b.n	80064b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800641c:	7bbb      	ldrb	r3, [r7, #14]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00d      	beq.n	800643e <USBD_StdEPReq+0x146>
 8006422:	7bbb      	ldrb	r3, [r7, #14]
 8006424:	2b80      	cmp	r3, #128	; 0x80
 8006426:	d00a      	beq.n	800643e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006428:	7bbb      	ldrb	r3, [r7, #14]
 800642a:	4619      	mov	r1, r3
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f001 f947 	bl	80076c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006432:	2180      	movs	r1, #128	; 0x80
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f001 f943 	bl	80076c0 <USBD_LL_StallEP>
 800643a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800643c:	e040      	b.n	80064c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fc3e 	bl	8006cc2 <USBD_CtlError>
              break;
 8006446:	e03b      	b.n	80064c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	885b      	ldrh	r3, [r3, #2]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d136      	bne.n	80064be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006450:	7bbb      	ldrb	r3, [r7, #14]
 8006452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006456:	2b00      	cmp	r3, #0
 8006458:	d004      	beq.n	8006464 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800645a:	7bbb      	ldrb	r3, [r7, #14]
 800645c:	4619      	mov	r1, r3
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f001 f94d 	bl	80076fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fcf7 	bl	8006e58 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800646a:	7bbb      	ldrb	r3, [r7, #14]
 800646c:	4619      	mov	r1, r3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7ff fde2 	bl	8006038 <USBD_CoreFindEP>
 8006474:	4603      	mov	r3, r0
 8006476:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006478:	7b7b      	ldrb	r3, [r7, #13]
 800647a:	2bff      	cmp	r3, #255	; 0xff
 800647c:	d01f      	beq.n	80064be <USBD_StdEPReq+0x1c6>
 800647e:	7b7b      	ldrb	r3, [r7, #13]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d11c      	bne.n	80064be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006484:	7b7a      	ldrb	r2, [r7, #13]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800648c:	7b7a      	ldrb	r2, [r7, #13]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	32ae      	adds	r2, #174	; 0xae
 8006492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d010      	beq.n	80064be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800649c:	7b7a      	ldrb	r2, [r7, #13]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	32ae      	adds	r2, #174	; 0xae
 80064a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	6839      	ldr	r1, [r7, #0]
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	4798      	blx	r3
 80064ae:	4603      	mov	r3, r0
 80064b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80064b2:	e004      	b.n	80064be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80064b4:	6839      	ldr	r1, [r7, #0]
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fc03 	bl	8006cc2 <USBD_CtlError>
              break;
 80064bc:	e000      	b.n	80064c0 <USBD_StdEPReq+0x1c8>
              break;
 80064be:	bf00      	nop
          }
          break;
 80064c0:	e0ab      	b.n	800661a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d002      	beq.n	80064d4 <USBD_StdEPReq+0x1dc>
 80064ce:	2b03      	cmp	r3, #3
 80064d0:	d032      	beq.n	8006538 <USBD_StdEPReq+0x240>
 80064d2:	e097      	b.n	8006604 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064d4:	7bbb      	ldrb	r3, [r7, #14]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d007      	beq.n	80064ea <USBD_StdEPReq+0x1f2>
 80064da:	7bbb      	ldrb	r3, [r7, #14]
 80064dc:	2b80      	cmp	r3, #128	; 0x80
 80064de:	d004      	beq.n	80064ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80064e0:	6839      	ldr	r1, [r7, #0]
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fbed 	bl	8006cc2 <USBD_CtlError>
                break;
 80064e8:	e091      	b.n	800660e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	da0b      	bge.n	800650a <USBD_StdEPReq+0x212>
 80064f2:	7bbb      	ldrb	r3, [r7, #14]
 80064f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064f8:	4613      	mov	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	3310      	adds	r3, #16
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	4413      	add	r3, r2
 8006506:	3304      	adds	r3, #4
 8006508:	e00b      	b.n	8006522 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800650a:	7bbb      	ldrb	r3, [r7, #14]
 800650c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006510:	4613      	mov	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	4413      	add	r3, r2
 8006520:	3304      	adds	r3, #4
 8006522:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2200      	movs	r2, #0
 8006528:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2202      	movs	r2, #2
 800652e:	4619      	mov	r1, r3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fc37 	bl	8006da4 <USBD_CtlSendData>
              break;
 8006536:	e06a      	b.n	800660e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006538:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800653c:	2b00      	cmp	r3, #0
 800653e:	da11      	bge.n	8006564 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006540:	7bbb      	ldrb	r3, [r7, #14]
 8006542:	f003 020f 	and.w	r2, r3, #15
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	4613      	mov	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	440b      	add	r3, r1
 8006552:	3324      	adds	r3, #36	; 0x24
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d117      	bne.n	800658a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fbb0 	bl	8006cc2 <USBD_CtlError>
                  break;
 8006562:	e054      	b.n	800660e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006564:	7bbb      	ldrb	r3, [r7, #14]
 8006566:	f003 020f 	and.w	r2, r3, #15
 800656a:	6879      	ldr	r1, [r7, #4]
 800656c:	4613      	mov	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	440b      	add	r3, r1
 8006576:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d104      	bne.n	800658a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fb9d 	bl	8006cc2 <USBD_CtlError>
                  break;
 8006588:	e041      	b.n	800660e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800658a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800658e:	2b00      	cmp	r3, #0
 8006590:	da0b      	bge.n	80065aa <USBD_StdEPReq+0x2b2>
 8006592:	7bbb      	ldrb	r3, [r7, #14]
 8006594:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006598:	4613      	mov	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	3310      	adds	r3, #16
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	4413      	add	r3, r2
 80065a6:	3304      	adds	r3, #4
 80065a8:	e00b      	b.n	80065c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80065aa:	7bbb      	ldrb	r3, [r7, #14]
 80065ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065b0:	4613      	mov	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	4413      	add	r3, r2
 80065c0:	3304      	adds	r3, #4
 80065c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80065c4:	7bbb      	ldrb	r3, [r7, #14]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d002      	beq.n	80065d0 <USBD_StdEPReq+0x2d8>
 80065ca:	7bbb      	ldrb	r3, [r7, #14]
 80065cc:	2b80      	cmp	r3, #128	; 0x80
 80065ce:	d103      	bne.n	80065d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2200      	movs	r2, #0
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	e00e      	b.n	80065f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80065d8:	7bbb      	ldrb	r3, [r7, #14]
 80065da:	4619      	mov	r1, r3
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f001 f8ad 	bl	800773c <USBD_LL_IsStallEP>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2201      	movs	r2, #1
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	e002      	b.n	80065f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2202      	movs	r2, #2
 80065fa:	4619      	mov	r1, r3
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fbd1 	bl	8006da4 <USBD_CtlSendData>
              break;
 8006602:	e004      	b.n	800660e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006604:	6839      	ldr	r1, [r7, #0]
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fb5b 	bl	8006cc2 <USBD_CtlError>
              break;
 800660c:	bf00      	nop
          }
          break;
 800660e:	e004      	b.n	800661a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fb55 	bl	8006cc2 <USBD_CtlError>
          break;
 8006618:	bf00      	nop
      }
      break;
 800661a:	e005      	b.n	8006628 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fb4f 	bl	8006cc2 <USBD_CtlError>
      break;
 8006624:	e000      	b.n	8006628 <USBD_StdEPReq+0x330>
      break;
 8006626:	bf00      	nop
  }

  return ret;
 8006628:	7bfb      	ldrb	r3, [r7, #15]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
	...

08006634 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800663e:	2300      	movs	r3, #0
 8006640:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006642:	2300      	movs	r3, #0
 8006644:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006646:	2300      	movs	r3, #0
 8006648:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	885b      	ldrh	r3, [r3, #2]
 800664e:	0a1b      	lsrs	r3, r3, #8
 8006650:	b29b      	uxth	r3, r3
 8006652:	3b01      	subs	r3, #1
 8006654:	2b06      	cmp	r3, #6
 8006656:	f200 8128 	bhi.w	80068aa <USBD_GetDescriptor+0x276>
 800665a:	a201      	add	r2, pc, #4	; (adr r2, 8006660 <USBD_GetDescriptor+0x2c>)
 800665c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006660:	0800667d 	.word	0x0800667d
 8006664:	08006695 	.word	0x08006695
 8006668:	080066d5 	.word	0x080066d5
 800666c:	080068ab 	.word	0x080068ab
 8006670:	080068ab 	.word	0x080068ab
 8006674:	0800684b 	.word	0x0800684b
 8006678:	08006877 	.word	0x08006877
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	7c12      	ldrb	r2, [r2, #16]
 8006688:	f107 0108 	add.w	r1, r7, #8
 800668c:	4610      	mov	r0, r2
 800668e:	4798      	blx	r3
 8006690:	60f8      	str	r0, [r7, #12]
      break;
 8006692:	e112      	b.n	80068ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	7c1b      	ldrb	r3, [r3, #16]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10d      	bne.n	80066b8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a4:	f107 0208 	add.w	r2, r7, #8
 80066a8:	4610      	mov	r0, r2
 80066aa:	4798      	blx	r3
 80066ac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3301      	adds	r3, #1
 80066b2:	2202      	movs	r2, #2
 80066b4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80066b6:	e100      	b.n	80068ba <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c0:	f107 0208 	add.w	r2, r7, #8
 80066c4:	4610      	mov	r0, r2
 80066c6:	4798      	blx	r3
 80066c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	3301      	adds	r3, #1
 80066ce:	2202      	movs	r2, #2
 80066d0:	701a      	strb	r2, [r3, #0]
      break;
 80066d2:	e0f2      	b.n	80068ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	885b      	ldrh	r3, [r3, #2]
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b05      	cmp	r3, #5
 80066dc:	f200 80ac 	bhi.w	8006838 <USBD_GetDescriptor+0x204>
 80066e0:	a201      	add	r2, pc, #4	; (adr r2, 80066e8 <USBD_GetDescriptor+0xb4>)
 80066e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e6:	bf00      	nop
 80066e8:	08006701 	.word	0x08006701
 80066ec:	08006735 	.word	0x08006735
 80066f0:	08006769 	.word	0x08006769
 80066f4:	0800679d 	.word	0x0800679d
 80066f8:	080067d1 	.word	0x080067d1
 80066fc:	08006805 	.word	0x08006805
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00b      	beq.n	8006724 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	7c12      	ldrb	r2, [r2, #16]
 8006718:	f107 0108 	add.w	r1, r7, #8
 800671c:	4610      	mov	r0, r2
 800671e:	4798      	blx	r3
 8006720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006722:	e091      	b.n	8006848 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 facb 	bl	8006cc2 <USBD_CtlError>
            err++;
 800672c:	7afb      	ldrb	r3, [r7, #11]
 800672e:	3301      	adds	r3, #1
 8006730:	72fb      	strb	r3, [r7, #11]
          break;
 8006732:	e089      	b.n	8006848 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00b      	beq.n	8006758 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	7c12      	ldrb	r2, [r2, #16]
 800674c:	f107 0108 	add.w	r1, r7, #8
 8006750:	4610      	mov	r0, r2
 8006752:	4798      	blx	r3
 8006754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006756:	e077      	b.n	8006848 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fab1 	bl	8006cc2 <USBD_CtlError>
            err++;
 8006760:	7afb      	ldrb	r3, [r7, #11]
 8006762:	3301      	adds	r3, #1
 8006764:	72fb      	strb	r3, [r7, #11]
          break;
 8006766:	e06f      	b.n	8006848 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00b      	beq.n	800678c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	7c12      	ldrb	r2, [r2, #16]
 8006780:	f107 0108 	add.w	r1, r7, #8
 8006784:	4610      	mov	r0, r2
 8006786:	4798      	blx	r3
 8006788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800678a:	e05d      	b.n	8006848 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800678c:	6839      	ldr	r1, [r7, #0]
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fa97 	bl	8006cc2 <USBD_CtlError>
            err++;
 8006794:	7afb      	ldrb	r3, [r7, #11]
 8006796:	3301      	adds	r3, #1
 8006798:	72fb      	strb	r3, [r7, #11]
          break;
 800679a:	e055      	b.n	8006848 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00b      	beq.n	80067c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	7c12      	ldrb	r2, [r2, #16]
 80067b4:	f107 0108 	add.w	r1, r7, #8
 80067b8:	4610      	mov	r0, r2
 80067ba:	4798      	blx	r3
 80067bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067be:	e043      	b.n	8006848 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067c0:	6839      	ldr	r1, [r7, #0]
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fa7d 	bl	8006cc2 <USBD_CtlError>
            err++;
 80067c8:	7afb      	ldrb	r3, [r7, #11]
 80067ca:	3301      	adds	r3, #1
 80067cc:	72fb      	strb	r3, [r7, #11]
          break;
 80067ce:	e03b      	b.n	8006848 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00b      	beq.n	80067f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	7c12      	ldrb	r2, [r2, #16]
 80067e8:	f107 0108 	add.w	r1, r7, #8
 80067ec:	4610      	mov	r0, r2
 80067ee:	4798      	blx	r3
 80067f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067f2:	e029      	b.n	8006848 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067f4:	6839      	ldr	r1, [r7, #0]
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fa63 	bl	8006cc2 <USBD_CtlError>
            err++;
 80067fc:	7afb      	ldrb	r3, [r7, #11]
 80067fe:	3301      	adds	r3, #1
 8006800:	72fb      	strb	r3, [r7, #11]
          break;
 8006802:	e021      	b.n	8006848 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00b      	beq.n	8006828 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	7c12      	ldrb	r2, [r2, #16]
 800681c:	f107 0108 	add.w	r1, r7, #8
 8006820:	4610      	mov	r0, r2
 8006822:	4798      	blx	r3
 8006824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006826:	e00f      	b.n	8006848 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006828:	6839      	ldr	r1, [r7, #0]
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fa49 	bl	8006cc2 <USBD_CtlError>
            err++;
 8006830:	7afb      	ldrb	r3, [r7, #11]
 8006832:	3301      	adds	r3, #1
 8006834:	72fb      	strb	r3, [r7, #11]
          break;
 8006836:	e007      	b.n	8006848 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fa41 	bl	8006cc2 <USBD_CtlError>
          err++;
 8006840:	7afb      	ldrb	r3, [r7, #11]
 8006842:	3301      	adds	r3, #1
 8006844:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006846:	bf00      	nop
      }
      break;
 8006848:	e037      	b.n	80068ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	7c1b      	ldrb	r3, [r3, #16]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d109      	bne.n	8006866 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685a:	f107 0208 	add.w	r2, r7, #8
 800685e:	4610      	mov	r0, r2
 8006860:	4798      	blx	r3
 8006862:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006864:	e029      	b.n	80068ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006866:	6839      	ldr	r1, [r7, #0]
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fa2a 	bl	8006cc2 <USBD_CtlError>
        err++;
 800686e:	7afb      	ldrb	r3, [r7, #11]
 8006870:	3301      	adds	r3, #1
 8006872:	72fb      	strb	r3, [r7, #11]
      break;
 8006874:	e021      	b.n	80068ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	7c1b      	ldrb	r3, [r3, #16]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10d      	bne.n	800689a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006886:	f107 0208 	add.w	r2, r7, #8
 800688a:	4610      	mov	r0, r2
 800688c:	4798      	blx	r3
 800688e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	3301      	adds	r3, #1
 8006894:	2207      	movs	r2, #7
 8006896:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006898:	e00f      	b.n	80068ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800689a:	6839      	ldr	r1, [r7, #0]
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fa10 	bl	8006cc2 <USBD_CtlError>
        err++;
 80068a2:	7afb      	ldrb	r3, [r7, #11]
 80068a4:	3301      	adds	r3, #1
 80068a6:	72fb      	strb	r3, [r7, #11]
      break;
 80068a8:	e007      	b.n	80068ba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80068aa:	6839      	ldr	r1, [r7, #0]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fa08 	bl	8006cc2 <USBD_CtlError>
      err++;
 80068b2:	7afb      	ldrb	r3, [r7, #11]
 80068b4:	3301      	adds	r3, #1
 80068b6:	72fb      	strb	r3, [r7, #11]
      break;
 80068b8:	bf00      	nop
  }

  if (err != 0U)
 80068ba:	7afb      	ldrb	r3, [r7, #11]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d11e      	bne.n	80068fe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	88db      	ldrh	r3, [r3, #6]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d016      	beq.n	80068f6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80068c8:	893b      	ldrh	r3, [r7, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00e      	beq.n	80068ec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	88da      	ldrh	r2, [r3, #6]
 80068d2:	893b      	ldrh	r3, [r7, #8]
 80068d4:	4293      	cmp	r3, r2
 80068d6:	bf28      	it	cs
 80068d8:	4613      	movcs	r3, r2
 80068da:	b29b      	uxth	r3, r3
 80068dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80068de:	893b      	ldrh	r3, [r7, #8]
 80068e0:	461a      	mov	r2, r3
 80068e2:	68f9      	ldr	r1, [r7, #12]
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fa5d 	bl	8006da4 <USBD_CtlSendData>
 80068ea:	e009      	b.n	8006900 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80068ec:	6839      	ldr	r1, [r7, #0]
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f9e7 	bl	8006cc2 <USBD_CtlError>
 80068f4:	e004      	b.n	8006900 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 faae 	bl	8006e58 <USBD_CtlSendStatus>
 80068fc:	e000      	b.n	8006900 <USBD_GetDescriptor+0x2cc>
    return;
 80068fe:	bf00      	nop
  }
}
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop

08006908 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	889b      	ldrh	r3, [r3, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d131      	bne.n	800697e <USBD_SetAddress+0x76>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	88db      	ldrh	r3, [r3, #6]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d12d      	bne.n	800697e <USBD_SetAddress+0x76>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	885b      	ldrh	r3, [r3, #2]
 8006926:	2b7f      	cmp	r3, #127	; 0x7f
 8006928:	d829      	bhi.n	800697e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	885b      	ldrh	r3, [r3, #2]
 800692e:	b2db      	uxtb	r3, r3
 8006930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006934:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b03      	cmp	r3, #3
 8006940:	d104      	bne.n	800694c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006942:	6839      	ldr	r1, [r7, #0]
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f9bc 	bl	8006cc2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800694a:	e01d      	b.n	8006988 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	7bfa      	ldrb	r2, [r7, #15]
 8006950:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006954:	7bfb      	ldrb	r3, [r7, #15]
 8006956:	4619      	mov	r1, r3
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 ff1b 	bl	8007794 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fa7a 	bl	8006e58 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006964:	7bfb      	ldrb	r3, [r7, #15]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d004      	beq.n	8006974 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2202      	movs	r2, #2
 800696e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006972:	e009      	b.n	8006988 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800697c:	e004      	b.n	8006988 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800697e:	6839      	ldr	r1, [r7, #0]
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f99e 	bl	8006cc2 <USBD_CtlError>
  }
}
 8006986:	bf00      	nop
 8006988:	bf00      	nop
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	885b      	ldrh	r3, [r3, #2]
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	4b4e      	ldr	r3, [pc, #312]	; (8006ae0 <USBD_SetConfig+0x150>)
 80069a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80069a8:	4b4d      	ldr	r3, [pc, #308]	; (8006ae0 <USBD_SetConfig+0x150>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d905      	bls.n	80069bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f985 	bl	8006cc2 <USBD_CtlError>
    return USBD_FAIL;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e08c      	b.n	8006ad6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d002      	beq.n	80069ce <USBD_SetConfig+0x3e>
 80069c8:	2b03      	cmp	r3, #3
 80069ca:	d029      	beq.n	8006a20 <USBD_SetConfig+0x90>
 80069cc:	e075      	b.n	8006aba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80069ce:	4b44      	ldr	r3, [pc, #272]	; (8006ae0 <USBD_SetConfig+0x150>)
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d020      	beq.n	8006a18 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80069d6:	4b42      	ldr	r3, [pc, #264]	; (8006ae0 <USBD_SetConfig+0x150>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80069e0:	4b3f      	ldr	r3, [pc, #252]	; (8006ae0 <USBD_SetConfig+0x150>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	4619      	mov	r1, r3
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7fe ffe7 	bl	80059ba <USBD_SetClassConfig>
 80069ec:	4603      	mov	r3, r0
 80069ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d008      	beq.n	8006a08 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f962 	bl	8006cc2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2202      	movs	r2, #2
 8006a02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a06:	e065      	b.n	8006ad4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fa25 	bl	8006e58 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2203      	movs	r2, #3
 8006a12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a16:	e05d      	b.n	8006ad4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 fa1d 	bl	8006e58 <USBD_CtlSendStatus>
      break;
 8006a1e:	e059      	b.n	8006ad4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006a20:	4b2f      	ldr	r3, [pc, #188]	; (8006ae0 <USBD_SetConfig+0x150>)
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d112      	bne.n	8006a4e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006a30:	4b2b      	ldr	r3, [pc, #172]	; (8006ae0 <USBD_SetConfig+0x150>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	461a      	mov	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a3a:	4b29      	ldr	r3, [pc, #164]	; (8006ae0 <USBD_SetConfig+0x150>)
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	4619      	mov	r1, r3
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7fe ffd6 	bl	80059f2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fa06 	bl	8006e58 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a4c:	e042      	b.n	8006ad4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006a4e:	4b24      	ldr	r3, [pc, #144]	; (8006ae0 <USBD_SetConfig+0x150>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	461a      	mov	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d02a      	beq.n	8006ab2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	4619      	mov	r1, r3
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7fe ffc4 	bl	80059f2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006a6a:	4b1d      	ldr	r3, [pc, #116]	; (8006ae0 <USBD_SetConfig+0x150>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a74:	4b1a      	ldr	r3, [pc, #104]	; (8006ae0 <USBD_SetConfig+0x150>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7fe ff9d 	bl	80059ba <USBD_SetClassConfig>
 8006a80:	4603      	mov	r3, r0
 8006a82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00f      	beq.n	8006aaa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f918 	bl	8006cc2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7fe ffa9 	bl	80059f2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006aa8:	e014      	b.n	8006ad4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f9d4 	bl	8006e58 <USBD_CtlSendStatus>
      break;
 8006ab0:	e010      	b.n	8006ad4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f9d0 	bl	8006e58 <USBD_CtlSendStatus>
      break;
 8006ab8:	e00c      	b.n	8006ad4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f900 	bl	8006cc2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ac2:	4b07      	ldr	r3, [pc, #28]	; (8006ae0 <USBD_SetConfig+0x150>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7fe ff92 	bl	80059f2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ad2:	bf00      	nop
  }

  return ret;
 8006ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	20000168 	.word	0x20000168

08006ae4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	88db      	ldrh	r3, [r3, #6]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d004      	beq.n	8006b00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f8e2 	bl	8006cc2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006afe:	e023      	b.n	8006b48 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	dc02      	bgt.n	8006b12 <USBD_GetConfig+0x2e>
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	dc03      	bgt.n	8006b18 <USBD_GetConfig+0x34>
 8006b10:	e015      	b.n	8006b3e <USBD_GetConfig+0x5a>
 8006b12:	2b03      	cmp	r3, #3
 8006b14:	d00b      	beq.n	8006b2e <USBD_GetConfig+0x4a>
 8006b16:	e012      	b.n	8006b3e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	3308      	adds	r3, #8
 8006b22:	2201      	movs	r2, #1
 8006b24:	4619      	mov	r1, r3
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f93c 	bl	8006da4 <USBD_CtlSendData>
        break;
 8006b2c:	e00c      	b.n	8006b48 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	3304      	adds	r3, #4
 8006b32:	2201      	movs	r2, #1
 8006b34:	4619      	mov	r1, r3
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f934 	bl	8006da4 <USBD_CtlSendData>
        break;
 8006b3c:	e004      	b.n	8006b48 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f8be 	bl	8006cc2 <USBD_CtlError>
        break;
 8006b46:	bf00      	nop
}
 8006b48:	bf00      	nop
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	3b01      	subs	r3, #1
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d81e      	bhi.n	8006ba6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	88db      	ldrh	r3, [r3, #6]
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d004      	beq.n	8006b7a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f8a5 	bl	8006cc2 <USBD_CtlError>
        break;
 8006b78:	e01a      	b.n	8006bb0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d005      	beq.n	8006b96 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	f043 0202 	orr.w	r2, r3, #2
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	330c      	adds	r3, #12
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f900 	bl	8006da4 <USBD_CtlSendData>
      break;
 8006ba4:	e004      	b.n	8006bb0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006ba6:	6839      	ldr	r1, [r7, #0]
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f88a 	bl	8006cc2 <USBD_CtlError>
      break;
 8006bae:	bf00      	nop
  }
}
 8006bb0:	bf00      	nop
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	885b      	ldrh	r3, [r3, #2]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d107      	bne.n	8006bda <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f940 	bl	8006e58 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006bd8:	e013      	b.n	8006c02 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	885b      	ldrh	r3, [r3, #2]
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d10b      	bne.n	8006bfa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	889b      	ldrh	r3, [r3, #4]
 8006be6:	0a1b      	lsrs	r3, r3, #8
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f930 	bl	8006e58 <USBD_CtlSendStatus>
}
 8006bf8:	e003      	b.n	8006c02 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006bfa:	6839      	ldr	r1, [r7, #0]
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f860 	bl	8006cc2 <USBD_CtlError>
}
 8006c02:	bf00      	nop
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b082      	sub	sp, #8
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d80b      	bhi.n	8006c3a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	885b      	ldrh	r3, [r3, #2]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d10c      	bne.n	8006c44 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f910 	bl	8006e58 <USBD_CtlSendStatus>
      }
      break;
 8006c38:	e004      	b.n	8006c44 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006c3a:	6839      	ldr	r1, [r7, #0]
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f840 	bl	8006cc2 <USBD_CtlError>
      break;
 8006c42:	e000      	b.n	8006c46 <USBD_ClrFeature+0x3c>
      break;
 8006c44:	bf00      	nop
  }
}
 8006c46:	bf00      	nop
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	781a      	ldrb	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	3301      	adds	r3, #1
 8006c68:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	781a      	ldrb	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	3301      	adds	r3, #1
 8006c76:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f7ff fa41 	bl	8006100 <SWAPBYTE>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	461a      	mov	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f7ff fa34 	bl	8006100 <SWAPBYTE>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f7ff fa27 	bl	8006100 <SWAPBYTE>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	80da      	strh	r2, [r3, #6]
}
 8006cba:	bf00      	nop
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b082      	sub	sp, #8
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ccc:	2180      	movs	r1, #128	; 0x80
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fcf6 	bl	80076c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fcf2 	bl	80076c0 <USBD_LL_StallEP>
}
 8006cdc:	bf00      	nop
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d036      	beq.n	8006d68 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006cfe:	6938      	ldr	r0, [r7, #16]
 8006d00:	f000 f836 	bl	8006d70 <USBD_GetLen>
 8006d04:	4603      	mov	r3, r0
 8006d06:	3301      	adds	r3, #1
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	005b      	lsls	r3, r3, #1
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006d12:	7dfb      	ldrb	r3, [r7, #23]
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	4413      	add	r3, r2
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	7812      	ldrb	r2, [r2, #0]
 8006d1c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d1e:	7dfb      	ldrb	r3, [r7, #23]
 8006d20:	3301      	adds	r3, #1
 8006d22:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	4413      	add	r3, r2
 8006d2a:	2203      	movs	r2, #3
 8006d2c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d2e:	7dfb      	ldrb	r3, [r7, #23]
 8006d30:	3301      	adds	r3, #1
 8006d32:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006d34:	e013      	b.n	8006d5e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006d36:	7dfb      	ldrb	r3, [r7, #23]
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	7812      	ldrb	r2, [r2, #0]
 8006d40:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	3301      	adds	r3, #1
 8006d46:	613b      	str	r3, [r7, #16]
    idx++;
 8006d48:	7dfb      	ldrb	r3, [r7, #23]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006d4e:	7dfb      	ldrb	r3, [r7, #23]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	4413      	add	r3, r2
 8006d54:	2200      	movs	r2, #0
 8006d56:	701a      	strb	r2, [r3, #0]
    idx++;
 8006d58:	7dfb      	ldrb	r3, [r7, #23]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1e7      	bne.n	8006d36 <USBD_GetString+0x52>
 8006d66:	e000      	b.n	8006d6a <USBD_GetString+0x86>
    return;
 8006d68:	bf00      	nop
  }
}
 8006d6a:	3718      	adds	r7, #24
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006d80:	e005      	b.n	8006d8e <USBD_GetLen+0x1e>
  {
    len++;
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
 8006d84:	3301      	adds	r3, #1
 8006d86:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1f5      	bne.n	8006d82 <USBD_GetLen+0x12>
  }

  return len;
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2202      	movs	r2, #2
 8006db4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	2100      	movs	r1, #0
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 fd01 	bl	80077d2 <USBD_LL_Transmit>

  return USBD_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b084      	sub	sp, #16
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	60f8      	str	r0, [r7, #12]
 8006de2:	60b9      	str	r1, [r7, #8]
 8006de4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	2100      	movs	r1, #0
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 fcf0 	bl	80077d2 <USBD_LL_Transmit>

  return USBD_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2203      	movs	r2, #3
 8006e0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	2100      	movs	r1, #0
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f000 fcf4 	bl	8007814 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b084      	sub	sp, #16
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	60f8      	str	r0, [r7, #12]
 8006e3e:	60b9      	str	r1, [r7, #8]
 8006e40:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	2100      	movs	r1, #0
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f000 fce3 	bl	8007814 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2204      	movs	r2, #4
 8006e64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e68:	2300      	movs	r3, #0
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fcaf 	bl	80077d2 <USBD_LL_Transmit>

  return USBD_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b082      	sub	sp, #8
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2205      	movs	r2, #5
 8006e8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e8e:	2300      	movs	r3, #0
 8006e90:	2200      	movs	r2, #0
 8006e92:	2100      	movs	r1, #0
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fcbd 	bl	8007814 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	4912      	ldr	r1, [pc, #72]	; (8006ef4 <MX_USB_DEVICE_Init+0x50>)
 8006eac:	4812      	ldr	r0, [pc, #72]	; (8006ef8 <MX_USB_DEVICE_Init+0x54>)
 8006eae:	f7fe fd07 	bl	80058c0 <USBD_Init>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006eb8:	f7f9 fc64 	bl	8000784 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006ebc:	490f      	ldr	r1, [pc, #60]	; (8006efc <MX_USB_DEVICE_Init+0x58>)
 8006ebe:	480e      	ldr	r0, [pc, #56]	; (8006ef8 <MX_USB_DEVICE_Init+0x54>)
 8006ec0:	f7fe fd2e 	bl	8005920 <USBD_RegisterClass>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006eca:	f7f9 fc5b 	bl	8000784 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006ece:	490c      	ldr	r1, [pc, #48]	; (8006f00 <MX_USB_DEVICE_Init+0x5c>)
 8006ed0:	4809      	ldr	r0, [pc, #36]	; (8006ef8 <MX_USB_DEVICE_Init+0x54>)
 8006ed2:	f7fe fc1f 	bl	8005714 <USBD_CDC_RegisterInterface>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006edc:	f7f9 fc52 	bl	8000784 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006ee0:	4805      	ldr	r0, [pc, #20]	; (8006ef8 <MX_USB_DEVICE_Init+0x54>)
 8006ee2:	f7fe fd53 	bl	800598c <USBD_Start>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006eec:	f7f9 fc4a 	bl	8000784 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006ef0:	bf00      	nop
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	200000ac 	.word	0x200000ac
 8006ef8:	2000016c 	.word	0x2000016c
 8006efc:	20000018 	.word	0x20000018
 8006f00:	20000098 	.word	0x20000098

08006f04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006f08:	2200      	movs	r2, #0
 8006f0a:	4905      	ldr	r1, [pc, #20]	; (8006f20 <CDC_Init_FS+0x1c>)
 8006f0c:	4805      	ldr	r0, [pc, #20]	; (8006f24 <CDC_Init_FS+0x20>)
 8006f0e:	f7fe fc1b 	bl	8005748 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006f12:	4905      	ldr	r1, [pc, #20]	; (8006f28 <CDC_Init_FS+0x24>)
 8006f14:	4803      	ldr	r0, [pc, #12]	; (8006f24 <CDC_Init_FS+0x20>)
 8006f16:	f7fe fc39 	bl	800578c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006f1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	20000c48 	.word	0x20000c48
 8006f24:	2000016c 	.word	0x2000016c
 8006f28:	20000448 	.word	0x20000448

08006f2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006f30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	4603      	mov	r3, r0
 8006f44:	6039      	str	r1, [r7, #0]
 8006f46:	71fb      	strb	r3, [r7, #7]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006f4c:	79fb      	ldrb	r3, [r7, #7]
 8006f4e:	2b23      	cmp	r3, #35	; 0x23
 8006f50:	d84a      	bhi.n	8006fe8 <CDC_Control_FS+0xac>
 8006f52:	a201      	add	r2, pc, #4	; (adr r2, 8006f58 <CDC_Control_FS+0x1c>)
 8006f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f58:	08006fe9 	.word	0x08006fe9
 8006f5c:	08006fe9 	.word	0x08006fe9
 8006f60:	08006fe9 	.word	0x08006fe9
 8006f64:	08006fe9 	.word	0x08006fe9
 8006f68:	08006fe9 	.word	0x08006fe9
 8006f6c:	08006fe9 	.word	0x08006fe9
 8006f70:	08006fe9 	.word	0x08006fe9
 8006f74:	08006fe9 	.word	0x08006fe9
 8006f78:	08006fe9 	.word	0x08006fe9
 8006f7c:	08006fe9 	.word	0x08006fe9
 8006f80:	08006fe9 	.word	0x08006fe9
 8006f84:	08006fe9 	.word	0x08006fe9
 8006f88:	08006fe9 	.word	0x08006fe9
 8006f8c:	08006fe9 	.word	0x08006fe9
 8006f90:	08006fe9 	.word	0x08006fe9
 8006f94:	08006fe9 	.word	0x08006fe9
 8006f98:	08006fe9 	.word	0x08006fe9
 8006f9c:	08006fe9 	.word	0x08006fe9
 8006fa0:	08006fe9 	.word	0x08006fe9
 8006fa4:	08006fe9 	.word	0x08006fe9
 8006fa8:	08006fe9 	.word	0x08006fe9
 8006fac:	08006fe9 	.word	0x08006fe9
 8006fb0:	08006fe9 	.word	0x08006fe9
 8006fb4:	08006fe9 	.word	0x08006fe9
 8006fb8:	08006fe9 	.word	0x08006fe9
 8006fbc:	08006fe9 	.word	0x08006fe9
 8006fc0:	08006fe9 	.word	0x08006fe9
 8006fc4:	08006fe9 	.word	0x08006fe9
 8006fc8:	08006fe9 	.word	0x08006fe9
 8006fcc:	08006fe9 	.word	0x08006fe9
 8006fd0:	08006fe9 	.word	0x08006fe9
 8006fd4:	08006fe9 	.word	0x08006fe9
 8006fd8:	08006fe9 	.word	0x08006fe9
 8006fdc:	08006fe9 	.word	0x08006fe9
 8006fe0:	08006fe9 	.word	0x08006fe9
 8006fe4:	08006fe9 	.word	0x08006fe9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006fe8:	bf00      	nop
  }

  return (USBD_OK);
 8006fea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007002:	6879      	ldr	r1, [r7, #4]
 8007004:	480f      	ldr	r0, [pc, #60]	; (8007044 <CDC_Receive_FS+0x4c>)
 8007006:	f7fe fbc1 	bl	800578c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800700a:	480e      	ldr	r0, [pc, #56]	; (8007044 <CDC_Receive_FS+0x4c>)
 800700c:	f7fe fc22 	bl	8005854 <USBD_CDC_ReceivePacket>

  //***
  if(Buf[0] == '1') {
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b31      	cmp	r3, #49	; 0x31
 8007016:	d106      	bne.n	8007026 <CDC_Receive_FS+0x2e>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8007018:	2200      	movs	r2, #0
 800701a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800701e:	480a      	ldr	r0, [pc, #40]	; (8007048 <CDC_Receive_FS+0x50>)
 8007020:	f7f9 ffac 	bl	8000f7c <HAL_GPIO_WritePin>
 8007024:	e009      	b.n	800703a <CDC_Receive_FS+0x42>
  }
  else if(Buf[0] == '0') {
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	2b30      	cmp	r3, #48	; 0x30
 800702c:	d105      	bne.n	800703a <CDC_Receive_FS+0x42>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800702e:	2201      	movs	r2, #1
 8007030:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007034:	4804      	ldr	r0, [pc, #16]	; (8007048 <CDC_Receive_FS+0x50>)
 8007036:	f7f9 ffa1 	bl	8000f7c <HAL_GPIO_WritePin>
  }
  //***

  return (USBD_OK);
 800703a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800703c:	4618      	mov	r0, r3
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	2000016c 	.word	0x2000016c
 8007048:	40020800 	.word	0x40020800

0800704c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	460b      	mov	r3, r1
 8007056:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800705c:	4b0d      	ldr	r3, [pc, #52]	; (8007094 <CDC_Transmit_FS+0x48>)
 800705e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007062:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800706a:	2b00      	cmp	r3, #0
 800706c:	d001      	beq.n	8007072 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800706e:	2301      	movs	r3, #1
 8007070:	e00b      	b.n	800708a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007072:	887b      	ldrh	r3, [r7, #2]
 8007074:	461a      	mov	r2, r3
 8007076:	6879      	ldr	r1, [r7, #4]
 8007078:	4806      	ldr	r0, [pc, #24]	; (8007094 <CDC_Transmit_FS+0x48>)
 800707a:	f7fe fb65 	bl	8005748 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800707e:	4805      	ldr	r0, [pc, #20]	; (8007094 <CDC_Transmit_FS+0x48>)
 8007080:	f7fe fba2 	bl	80057c8 <USBD_CDC_TransmitPacket>
 8007084:	4603      	mov	r3, r0
 8007086:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007088:	7bfb      	ldrb	r3, [r7, #15]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	2000016c 	.word	0x2000016c

08007098 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007098:	b480      	push	{r7}
 800709a:	b087      	sub	sp, #28
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	4613      	mov	r3, r2
 80070a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80070aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
	...

080070bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	4603      	mov	r3, r0
 80070c4:	6039      	str	r1, [r7, #0]
 80070c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	2212      	movs	r2, #18
 80070cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80070ce:	4b03      	ldr	r3, [pc, #12]	; (80070dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	200000c8 	.word	0x200000c8

080070e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	4603      	mov	r3, r0
 80070e8:	6039      	str	r1, [r7, #0]
 80070ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	2204      	movs	r2, #4
 80070f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80070f2:	4b03      	ldr	r3, [pc, #12]	; (8007100 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	200000dc 	.word	0x200000dc

08007104 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	6039      	str	r1, [r7, #0]
 800710e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007110:	79fb      	ldrb	r3, [r7, #7]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d105      	bne.n	8007122 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	4907      	ldr	r1, [pc, #28]	; (8007138 <USBD_FS_ProductStrDescriptor+0x34>)
 800711a:	4808      	ldr	r0, [pc, #32]	; (800713c <USBD_FS_ProductStrDescriptor+0x38>)
 800711c:	f7ff fde2 	bl	8006ce4 <USBD_GetString>
 8007120:	e004      	b.n	800712c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	4904      	ldr	r1, [pc, #16]	; (8007138 <USBD_FS_ProductStrDescriptor+0x34>)
 8007126:	4805      	ldr	r0, [pc, #20]	; (800713c <USBD_FS_ProductStrDescriptor+0x38>)
 8007128:	f7ff fddc 	bl	8006ce4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800712c:	4b02      	ldr	r3, [pc, #8]	; (8007138 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	20001448 	.word	0x20001448
 800713c:	0800797c 	.word	0x0800797c

08007140 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	4603      	mov	r3, r0
 8007148:	6039      	str	r1, [r7, #0]
 800714a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	4904      	ldr	r1, [pc, #16]	; (8007160 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007150:	4804      	ldr	r0, [pc, #16]	; (8007164 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007152:	f7ff fdc7 	bl	8006ce4 <USBD_GetString>
  return USBD_StrDesc;
 8007156:	4b02      	ldr	r3, [pc, #8]	; (8007160 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007158:	4618      	mov	r0, r3
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	20001448 	.word	0x20001448
 8007164:	08007994 	.word	0x08007994

08007168 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	4603      	mov	r3, r0
 8007170:	6039      	str	r1, [r7, #0]
 8007172:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	221a      	movs	r2, #26
 8007178:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800717a:	f000 f843 	bl	8007204 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800717e:	4b02      	ldr	r3, [pc, #8]	; (8007188 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007180:	4618      	mov	r0, r3
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	200000e0 	.word	0x200000e0

0800718c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	4603      	mov	r3, r0
 8007194:	6039      	str	r1, [r7, #0]
 8007196:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007198:	79fb      	ldrb	r3, [r7, #7]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d105      	bne.n	80071aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	4907      	ldr	r1, [pc, #28]	; (80071c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80071a2:	4808      	ldr	r0, [pc, #32]	; (80071c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071a4:	f7ff fd9e 	bl	8006ce4 <USBD_GetString>
 80071a8:	e004      	b.n	80071b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	4904      	ldr	r1, [pc, #16]	; (80071c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80071ae:	4805      	ldr	r0, [pc, #20]	; (80071c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071b0:	f7ff fd98 	bl	8006ce4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071b4:	4b02      	ldr	r3, [pc, #8]	; (80071c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	20001448 	.word	0x20001448
 80071c4:	080079a8 	.word	0x080079a8

080071c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	4603      	mov	r3, r0
 80071d0:	6039      	str	r1, [r7, #0]
 80071d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071d4:	79fb      	ldrb	r3, [r7, #7]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d105      	bne.n	80071e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	4907      	ldr	r1, [pc, #28]	; (80071fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071de:	4808      	ldr	r0, [pc, #32]	; (8007200 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071e0:	f7ff fd80 	bl	8006ce4 <USBD_GetString>
 80071e4:	e004      	b.n	80071f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071e6:	683a      	ldr	r2, [r7, #0]
 80071e8:	4904      	ldr	r1, [pc, #16]	; (80071fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071ea:	4805      	ldr	r0, [pc, #20]	; (8007200 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071ec:	f7ff fd7a 	bl	8006ce4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071f0:	4b02      	ldr	r3, [pc, #8]	; (80071fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	20001448 	.word	0x20001448
 8007200:	080079b4 	.word	0x080079b4

08007204 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800720a:	4b0f      	ldr	r3, [pc, #60]	; (8007248 <Get_SerialNum+0x44>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007210:	4b0e      	ldr	r3, [pc, #56]	; (800724c <Get_SerialNum+0x48>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007216:	4b0e      	ldr	r3, [pc, #56]	; (8007250 <Get_SerialNum+0x4c>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4413      	add	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d009      	beq.n	800723e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800722a:	2208      	movs	r2, #8
 800722c:	4909      	ldr	r1, [pc, #36]	; (8007254 <Get_SerialNum+0x50>)
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f000 f814 	bl	800725c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007234:	2204      	movs	r2, #4
 8007236:	4908      	ldr	r1, [pc, #32]	; (8007258 <Get_SerialNum+0x54>)
 8007238:	68b8      	ldr	r0, [r7, #8]
 800723a:	f000 f80f 	bl	800725c <IntToUnicode>
  }
}
 800723e:	bf00      	nop
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	1fff7a10 	.word	0x1fff7a10
 800724c:	1fff7a14 	.word	0x1fff7a14
 8007250:	1fff7a18 	.word	0x1fff7a18
 8007254:	200000e2 	.word	0x200000e2
 8007258:	200000f2 	.word	0x200000f2

0800725c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	4613      	mov	r3, r2
 8007268:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800726a:	2300      	movs	r3, #0
 800726c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800726e:	2300      	movs	r3, #0
 8007270:	75fb      	strb	r3, [r7, #23]
 8007272:	e027      	b.n	80072c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	0f1b      	lsrs	r3, r3, #28
 8007278:	2b09      	cmp	r3, #9
 800727a:	d80b      	bhi.n	8007294 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	0f1b      	lsrs	r3, r3, #28
 8007280:	b2da      	uxtb	r2, r3
 8007282:	7dfb      	ldrb	r3, [r7, #23]
 8007284:	005b      	lsls	r3, r3, #1
 8007286:	4619      	mov	r1, r3
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	440b      	add	r3, r1
 800728c:	3230      	adds	r2, #48	; 0x30
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	701a      	strb	r2, [r3, #0]
 8007292:	e00a      	b.n	80072aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	0f1b      	lsrs	r3, r3, #28
 8007298:	b2da      	uxtb	r2, r3
 800729a:	7dfb      	ldrb	r3, [r7, #23]
 800729c:	005b      	lsls	r3, r3, #1
 800729e:	4619      	mov	r1, r3
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	440b      	add	r3, r1
 80072a4:	3237      	adds	r2, #55	; 0x37
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	011b      	lsls	r3, r3, #4
 80072ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80072b0:	7dfb      	ldrb	r3, [r7, #23]
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	3301      	adds	r3, #1
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	4413      	add	r3, r2
 80072ba:	2200      	movs	r2, #0
 80072bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80072be:	7dfb      	ldrb	r3, [r7, #23]
 80072c0:	3301      	adds	r3, #1
 80072c2:	75fb      	strb	r3, [r7, #23]
 80072c4:	7dfa      	ldrb	r2, [r7, #23]
 80072c6:	79fb      	ldrb	r3, [r7, #7]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d3d3      	bcc.n	8007274 <IntToUnicode+0x18>
  }
}
 80072cc:	bf00      	nop
 80072ce:	bf00      	nop
 80072d0:	371c      	adds	r7, #28
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
	...

080072dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08a      	sub	sp, #40	; 0x28
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072e4:	f107 0314 	add.w	r3, r7, #20
 80072e8:	2200      	movs	r2, #0
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	605a      	str	r2, [r3, #4]
 80072ee:	609a      	str	r2, [r3, #8]
 80072f0:	60da      	str	r2, [r3, #12]
 80072f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072fc:	d13a      	bne.n	8007374 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072fe:	2300      	movs	r3, #0
 8007300:	613b      	str	r3, [r7, #16]
 8007302:	4b1e      	ldr	r3, [pc, #120]	; (800737c <HAL_PCD_MspInit+0xa0>)
 8007304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007306:	4a1d      	ldr	r2, [pc, #116]	; (800737c <HAL_PCD_MspInit+0xa0>)
 8007308:	f043 0301 	orr.w	r3, r3, #1
 800730c:	6313      	str	r3, [r2, #48]	; 0x30
 800730e:	4b1b      	ldr	r3, [pc, #108]	; (800737c <HAL_PCD_MspInit+0xa0>)
 8007310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	613b      	str	r3, [r7, #16]
 8007318:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800731a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800731e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007320:	2302      	movs	r3, #2
 8007322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007324:	2300      	movs	r3, #0
 8007326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007328:	2303      	movs	r3, #3
 800732a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800732c:	230a      	movs	r3, #10
 800732e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007330:	f107 0314 	add.w	r3, r7, #20
 8007334:	4619      	mov	r1, r3
 8007336:	4812      	ldr	r0, [pc, #72]	; (8007380 <HAL_PCD_MspInit+0xa4>)
 8007338:	f7f9 fc9c 	bl	8000c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800733c:	4b0f      	ldr	r3, [pc, #60]	; (800737c <HAL_PCD_MspInit+0xa0>)
 800733e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007340:	4a0e      	ldr	r2, [pc, #56]	; (800737c <HAL_PCD_MspInit+0xa0>)
 8007342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007346:	6353      	str	r3, [r2, #52]	; 0x34
 8007348:	2300      	movs	r3, #0
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	4b0b      	ldr	r3, [pc, #44]	; (800737c <HAL_PCD_MspInit+0xa0>)
 800734e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007350:	4a0a      	ldr	r2, [pc, #40]	; (800737c <HAL_PCD_MspInit+0xa0>)
 8007352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007356:	6453      	str	r3, [r2, #68]	; 0x44
 8007358:	4b08      	ldr	r3, [pc, #32]	; (800737c <HAL_PCD_MspInit+0xa0>)
 800735a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800735c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007364:	2200      	movs	r2, #0
 8007366:	2100      	movs	r1, #0
 8007368:	2043      	movs	r0, #67	; 0x43
 800736a:	f7f9 fc4c 	bl	8000c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800736e:	2043      	movs	r0, #67	; 0x43
 8007370:	f7f9 fc65 	bl	8000c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007374:	bf00      	nop
 8007376:	3728      	adds	r7, #40	; 0x28
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	40023800 	.word	0x40023800
 8007380:	40020000 	.word	0x40020000

08007384 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007398:	4619      	mov	r1, r3
 800739a:	4610      	mov	r0, r2
 800739c:	f7fe fb43 	bl	8005a26 <USBD_LL_SetupStage>
}
 80073a0:	bf00      	nop
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	460b      	mov	r3, r1
 80073b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80073ba:	78fa      	ldrb	r2, [r7, #3]
 80073bc:	6879      	ldr	r1, [r7, #4]
 80073be:	4613      	mov	r3, r2
 80073c0:	00db      	lsls	r3, r3, #3
 80073c2:	4413      	add	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	440b      	add	r3, r1
 80073c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	78fb      	ldrb	r3, [r7, #3]
 80073d0:	4619      	mov	r1, r3
 80073d2:	f7fe fb7d 	bl	8005ad0 <USBD_LL_DataOutStage>
}
 80073d6:	bf00      	nop
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b082      	sub	sp, #8
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	460b      	mov	r3, r1
 80073e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80073f0:	78fa      	ldrb	r2, [r7, #3]
 80073f2:	6879      	ldr	r1, [r7, #4]
 80073f4:	4613      	mov	r3, r2
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	4413      	add	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	440b      	add	r3, r1
 80073fe:	334c      	adds	r3, #76	; 0x4c
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	78fb      	ldrb	r3, [r7, #3]
 8007404:	4619      	mov	r1, r3
 8007406:	f7fe fc16 	bl	8005c36 <USBD_LL_DataInStage>
}
 800740a:	bf00      	nop
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007420:	4618      	mov	r0, r3
 8007422:	f7fe fd4a 	bl	8005eba <USBD_LL_SOF>
}
 8007426:	bf00      	nop
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b084      	sub	sp, #16
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007436:	2301      	movs	r3, #1
 8007438:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d102      	bne.n	8007448 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007442:	2300      	movs	r3, #0
 8007444:	73fb      	strb	r3, [r7, #15]
 8007446:	e008      	b.n	800745a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	2b02      	cmp	r3, #2
 800744e:	d102      	bne.n	8007456 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007450:	2301      	movs	r3, #1
 8007452:	73fb      	strb	r3, [r7, #15]
 8007454:	e001      	b.n	800745a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007456:	f7f9 f995 	bl	8000784 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007460:	7bfa      	ldrb	r2, [r7, #15]
 8007462:	4611      	mov	r1, r2
 8007464:	4618      	mov	r0, r3
 8007466:	f7fe fcea 	bl	8005e3e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007470:	4618      	mov	r0, r3
 8007472:	f7fe fc92 	bl	8005d9a <USBD_LL_Reset>
}
 8007476:	bf00      	nop
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800748e:	4618      	mov	r0, r3
 8007490:	f7fe fce5 	bl	8005e5e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	6812      	ldr	r2, [r2, #0]
 80074a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074a6:	f043 0301 	orr.w	r3, r3, #1
 80074aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a1b      	ldr	r3, [r3, #32]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d005      	beq.n	80074c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074b4:	4b04      	ldr	r3, [pc, #16]	; (80074c8 <HAL_PCD_SuspendCallback+0x48>)
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	4a03      	ldr	r2, [pc, #12]	; (80074c8 <HAL_PCD_SuspendCallback+0x48>)
 80074ba:	f043 0306 	orr.w	r3, r3, #6
 80074be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80074c0:	bf00      	nop
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	e000ed00 	.word	0xe000ed00

080074cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fe fcd5 	bl	8005e8a <USBD_LL_Resume>
}
 80074e0:	bf00      	nop
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074fa:	78fa      	ldrb	r2, [r7, #3]
 80074fc:	4611      	mov	r1, r2
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fe fd2d 	bl	8005f5e <USBD_LL_IsoOUTIncomplete>
}
 8007504:	bf00      	nop
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	460b      	mov	r3, r1
 8007516:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800751e:	78fa      	ldrb	r2, [r7, #3]
 8007520:	4611      	mov	r1, r2
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe fce9 	bl	8005efa <USBD_LL_IsoINIncomplete>
}
 8007528:	bf00      	nop
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800753e:	4618      	mov	r0, r3
 8007540:	f7fe fd3f 	bl	8005fc2 <USBD_LL_DevConnected>
}
 8007544:	bf00      	nop
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800755a:	4618      	mov	r0, r3
 800755c:	f7fe fd3c 	bl	8005fd8 <USBD_LL_DevDisconnected>
}
 8007560:	bf00      	nop
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d13c      	bne.n	80075f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007578:	4a20      	ldr	r2, [pc, #128]	; (80075fc <USBD_LL_Init+0x94>)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a1e      	ldr	r2, [pc, #120]	; (80075fc <USBD_LL_Init+0x94>)
 8007584:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007588:	4b1c      	ldr	r3, [pc, #112]	; (80075fc <USBD_LL_Init+0x94>)
 800758a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800758e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007590:	4b1a      	ldr	r3, [pc, #104]	; (80075fc <USBD_LL_Init+0x94>)
 8007592:	2204      	movs	r2, #4
 8007594:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007596:	4b19      	ldr	r3, [pc, #100]	; (80075fc <USBD_LL_Init+0x94>)
 8007598:	2202      	movs	r2, #2
 800759a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800759c:	4b17      	ldr	r3, [pc, #92]	; (80075fc <USBD_LL_Init+0x94>)
 800759e:	2200      	movs	r2, #0
 80075a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80075a2:	4b16      	ldr	r3, [pc, #88]	; (80075fc <USBD_LL_Init+0x94>)
 80075a4:	2202      	movs	r2, #2
 80075a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80075a8:	4b14      	ldr	r3, [pc, #80]	; (80075fc <USBD_LL_Init+0x94>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80075ae:	4b13      	ldr	r3, [pc, #76]	; (80075fc <USBD_LL_Init+0x94>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80075b4:	4b11      	ldr	r3, [pc, #68]	; (80075fc <USBD_LL_Init+0x94>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80075ba:	4b10      	ldr	r3, [pc, #64]	; (80075fc <USBD_LL_Init+0x94>)
 80075bc:	2200      	movs	r2, #0
 80075be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80075c0:	4b0e      	ldr	r3, [pc, #56]	; (80075fc <USBD_LL_Init+0x94>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80075c6:	480d      	ldr	r0, [pc, #52]	; (80075fc <USBD_LL_Init+0x94>)
 80075c8:	f7f9 fcf1 	bl	8000fae <HAL_PCD_Init>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80075d2:	f7f9 f8d7 	bl	8000784 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80075d6:	2180      	movs	r1, #128	; 0x80
 80075d8:	4808      	ldr	r0, [pc, #32]	; (80075fc <USBD_LL_Init+0x94>)
 80075da:	f7fa ff48 	bl	800246e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80075de:	2240      	movs	r2, #64	; 0x40
 80075e0:	2100      	movs	r1, #0
 80075e2:	4806      	ldr	r0, [pc, #24]	; (80075fc <USBD_LL_Init+0x94>)
 80075e4:	f7fa fefc 	bl	80023e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80075e8:	2280      	movs	r2, #128	; 0x80
 80075ea:	2101      	movs	r1, #1
 80075ec:	4803      	ldr	r0, [pc, #12]	; (80075fc <USBD_LL_Init+0x94>)
 80075ee:	f7fa fef7 	bl	80023e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80075f2:	2300      	movs	r3, #0
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	20001648 	.word	0x20001648

08007600 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007608:	2300      	movs	r3, #0
 800760a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800760c:	2300      	movs	r3, #0
 800760e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007616:	4618      	mov	r0, r3
 8007618:	f7f9 fde6 	bl	80011e8 <HAL_PCD_Start>
 800761c:	4603      	mov	r3, r0
 800761e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007620:	7bfb      	ldrb	r3, [r7, #15]
 8007622:	4618      	mov	r0, r3
 8007624:	f000 f942 	bl	80078ac <USBD_Get_USB_Status>
 8007628:	4603      	mov	r3, r0
 800762a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800762c:	7bbb      	ldrb	r3, [r7, #14]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b084      	sub	sp, #16
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	4608      	mov	r0, r1
 8007640:	4611      	mov	r1, r2
 8007642:	461a      	mov	r2, r3
 8007644:	4603      	mov	r3, r0
 8007646:	70fb      	strb	r3, [r7, #3]
 8007648:	460b      	mov	r3, r1
 800764a:	70bb      	strb	r3, [r7, #2]
 800764c:	4613      	mov	r3, r2
 800764e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007654:	2300      	movs	r3, #0
 8007656:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800765e:	78bb      	ldrb	r3, [r7, #2]
 8007660:	883a      	ldrh	r2, [r7, #0]
 8007662:	78f9      	ldrb	r1, [r7, #3]
 8007664:	f7fa fab7 	bl	8001bd6 <HAL_PCD_EP_Open>
 8007668:	4603      	mov	r3, r0
 800766a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800766c:	7bfb      	ldrb	r3, [r7, #15]
 800766e:	4618      	mov	r0, r3
 8007670:	f000 f91c 	bl	80078ac <USBD_Get_USB_Status>
 8007674:	4603      	mov	r3, r0
 8007676:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007678:	7bbb      	ldrb	r3, [r7, #14]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b084      	sub	sp, #16
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	460b      	mov	r3, r1
 800768c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800768e:	2300      	movs	r3, #0
 8007690:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007692:	2300      	movs	r3, #0
 8007694:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800769c:	78fa      	ldrb	r2, [r7, #3]
 800769e:	4611      	mov	r1, r2
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7fa fb00 	bl	8001ca6 <HAL_PCD_EP_Close>
 80076a6:	4603      	mov	r3, r0
 80076a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f000 f8fd 	bl	80078ac <USBD_Get_USB_Status>
 80076b2:	4603      	mov	r3, r0
 80076b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	460b      	mov	r3, r1
 80076ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076da:	78fa      	ldrb	r2, [r7, #3]
 80076dc:	4611      	mov	r1, r2
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fa fbd8 	bl	8001e94 <HAL_PCD_EP_SetStall>
 80076e4:	4603      	mov	r3, r0
 80076e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 f8de 	bl	80078ac <USBD_Get_USB_Status>
 80076f0:	4603      	mov	r3, r0
 80076f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b084      	sub	sp, #16
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	460b      	mov	r3, r1
 8007708:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007718:	78fa      	ldrb	r2, [r7, #3]
 800771a:	4611      	mov	r1, r2
 800771c:	4618      	mov	r0, r3
 800771e:	f7fa fc1d 	bl	8001f5c <HAL_PCD_EP_ClrStall>
 8007722:	4603      	mov	r3, r0
 8007724:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007726:	7bfb      	ldrb	r3, [r7, #15]
 8007728:	4618      	mov	r0, r3
 800772a:	f000 f8bf 	bl	80078ac <USBD_Get_USB_Status>
 800772e:	4603      	mov	r3, r0
 8007730:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007732:	7bbb      	ldrb	r3, [r7, #14]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	460b      	mov	r3, r1
 8007746:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800774e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007750:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007754:	2b00      	cmp	r3, #0
 8007756:	da0b      	bge.n	8007770 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007758:	78fb      	ldrb	r3, [r7, #3]
 800775a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800775e:	68f9      	ldr	r1, [r7, #12]
 8007760:	4613      	mov	r3, r2
 8007762:	00db      	lsls	r3, r3, #3
 8007764:	4413      	add	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	440b      	add	r3, r1
 800776a:	333e      	adds	r3, #62	; 0x3e
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	e00b      	b.n	8007788 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007770:	78fb      	ldrb	r3, [r7, #3]
 8007772:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007776:	68f9      	ldr	r1, [r7, #12]
 8007778:	4613      	mov	r3, r2
 800777a:	00db      	lsls	r3, r3, #3
 800777c:	4413      	add	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	440b      	add	r3, r1
 8007782:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007786:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007788:	4618      	mov	r0, r3
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	460b      	mov	r3, r1
 800779e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077a0:	2300      	movs	r3, #0
 80077a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077ae:	78fa      	ldrb	r2, [r7, #3]
 80077b0:	4611      	mov	r1, r2
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fa f9ea 	bl	8001b8c <HAL_PCD_SetAddress>
 80077b8:	4603      	mov	r3, r0
 80077ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 f874 	bl	80078ac <USBD_Get_USB_Status>
 80077c4:	4603      	mov	r3, r0
 80077c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b086      	sub	sp, #24
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	60f8      	str	r0, [r7, #12]
 80077da:	607a      	str	r2, [r7, #4]
 80077dc:	603b      	str	r3, [r7, #0]
 80077de:	460b      	mov	r3, r1
 80077e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80077f0:	7af9      	ldrb	r1, [r7, #11]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	f7fa fb03 	bl	8001e00 <HAL_PCD_EP_Transmit>
 80077fa:	4603      	mov	r3, r0
 80077fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077fe:	7dfb      	ldrb	r3, [r7, #23]
 8007800:	4618      	mov	r0, r3
 8007802:	f000 f853 	bl	80078ac <USBD_Get_USB_Status>
 8007806:	4603      	mov	r3, r0
 8007808:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800780a:	7dbb      	ldrb	r3, [r7, #22]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3718      	adds	r7, #24
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	607a      	str	r2, [r7, #4]
 800781e:	603b      	str	r3, [r7, #0]
 8007820:	460b      	mov	r3, r1
 8007822:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007824:	2300      	movs	r3, #0
 8007826:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007828:	2300      	movs	r3, #0
 800782a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007832:	7af9      	ldrb	r1, [r7, #11]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	f7fa fa7f 	bl	8001d3a <HAL_PCD_EP_Receive>
 800783c:	4603      	mov	r3, r0
 800783e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007840:	7dfb      	ldrb	r3, [r7, #23]
 8007842:	4618      	mov	r0, r3
 8007844:	f000 f832 	bl	80078ac <USBD_Get_USB_Status>
 8007848:	4603      	mov	r3, r0
 800784a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800784c:	7dbb      	ldrb	r3, [r7, #22]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b082      	sub	sp, #8
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	460b      	mov	r3, r1
 8007860:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007868:	78fa      	ldrb	r2, [r7, #3]
 800786a:	4611      	mov	r1, r2
 800786c:	4618      	mov	r0, r3
 800786e:	f7fa faaf 	bl	8001dd0 <HAL_PCD_EP_GetRxCount>
 8007872:	4603      	mov	r3, r0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007884:	4b03      	ldr	r3, [pc, #12]	; (8007894 <USBD_static_malloc+0x18>)
}
 8007886:	4618      	mov	r0, r3
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	20001b54 	.word	0x20001b54

08007898 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]

}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	4603      	mov	r3, r0
 80078b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80078ba:	79fb      	ldrb	r3, [r7, #7]
 80078bc:	2b03      	cmp	r3, #3
 80078be:	d817      	bhi.n	80078f0 <USBD_Get_USB_Status+0x44>
 80078c0:	a201      	add	r2, pc, #4	; (adr r2, 80078c8 <USBD_Get_USB_Status+0x1c>)
 80078c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c6:	bf00      	nop
 80078c8:	080078d9 	.word	0x080078d9
 80078cc:	080078df 	.word	0x080078df
 80078d0:	080078e5 	.word	0x080078e5
 80078d4:	080078eb 	.word	0x080078eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	73fb      	strb	r3, [r7, #15]
    break;
 80078dc:	e00b      	b.n	80078f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80078de:	2303      	movs	r3, #3
 80078e0:	73fb      	strb	r3, [r7, #15]
    break;
 80078e2:	e008      	b.n	80078f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80078e4:	2301      	movs	r3, #1
 80078e6:	73fb      	strb	r3, [r7, #15]
    break;
 80078e8:	e005      	b.n	80078f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80078ea:	2303      	movs	r3, #3
 80078ec:	73fb      	strb	r3, [r7, #15]
    break;
 80078ee:	e002      	b.n	80078f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80078f0:	2303      	movs	r3, #3
 80078f2:	73fb      	strb	r3, [r7, #15]
    break;
 80078f4:	bf00      	nop
  }
  return usb_status;
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3714      	adds	r7, #20
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <__libc_init_array>:
 8007904:	b570      	push	{r4, r5, r6, lr}
 8007906:	4d0d      	ldr	r5, [pc, #52]	; (800793c <__libc_init_array+0x38>)
 8007908:	4c0d      	ldr	r4, [pc, #52]	; (8007940 <__libc_init_array+0x3c>)
 800790a:	1b64      	subs	r4, r4, r5
 800790c:	10a4      	asrs	r4, r4, #2
 800790e:	2600      	movs	r6, #0
 8007910:	42a6      	cmp	r6, r4
 8007912:	d109      	bne.n	8007928 <__libc_init_array+0x24>
 8007914:	4d0b      	ldr	r5, [pc, #44]	; (8007944 <__libc_init_array+0x40>)
 8007916:	4c0c      	ldr	r4, [pc, #48]	; (8007948 <__libc_init_array+0x44>)
 8007918:	f000 f820 	bl	800795c <_init>
 800791c:	1b64      	subs	r4, r4, r5
 800791e:	10a4      	asrs	r4, r4, #2
 8007920:	2600      	movs	r6, #0
 8007922:	42a6      	cmp	r6, r4
 8007924:	d105      	bne.n	8007932 <__libc_init_array+0x2e>
 8007926:	bd70      	pop	{r4, r5, r6, pc}
 8007928:	f855 3b04 	ldr.w	r3, [r5], #4
 800792c:	4798      	blx	r3
 800792e:	3601      	adds	r6, #1
 8007930:	e7ee      	b.n	8007910 <__libc_init_array+0xc>
 8007932:	f855 3b04 	ldr.w	r3, [r5], #4
 8007936:	4798      	blx	r3
 8007938:	3601      	adds	r6, #1
 800793a:	e7f2      	b.n	8007922 <__libc_init_array+0x1e>
 800793c:	080079dc 	.word	0x080079dc
 8007940:	080079dc 	.word	0x080079dc
 8007944:	080079dc 	.word	0x080079dc
 8007948:	080079e0 	.word	0x080079e0

0800794c <memset>:
 800794c:	4402      	add	r2, r0
 800794e:	4603      	mov	r3, r0
 8007950:	4293      	cmp	r3, r2
 8007952:	d100      	bne.n	8007956 <memset+0xa>
 8007954:	4770      	bx	lr
 8007956:	f803 1b01 	strb.w	r1, [r3], #1
 800795a:	e7f9      	b.n	8007950 <memset+0x4>

0800795c <_init>:
 800795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795e:	bf00      	nop
 8007960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007962:	bc08      	pop	{r3}
 8007964:	469e      	mov	lr, r3
 8007966:	4770      	bx	lr

08007968 <_fini>:
 8007968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796a:	bf00      	nop
 800796c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800796e:	bc08      	pop	{r3}
 8007970:	469e      	mov	lr, r3
 8007972:	4770      	bx	lr
